/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:00:14 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.DefaultKeyedValue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeyedValue_ESTest extends DefaultKeyedValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      defaultKeyedValue0.setValue((Number) null);
      Number number0 = defaultKeyedValue0.getValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, double0);
      Number number0 = defaultKeyedValue0.getValue();
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-9));
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, byte0);
      Number number0 = defaultKeyedValue0.getValue();
      assertEquals((byte) (-9), number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      defaultKeyedValue0.setValue((Number) null);
      // Undeclared exception!
      try { 
        defaultKeyedValue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      defaultKeyedValue0.setValue((Number) null);
      defaultKeyedValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      defaultKeyedValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      Object object0 = defaultKeyedValue0.clone();
      boolean boolean0 = defaultKeyedValue0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, defaultKeyedValue0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6312L);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, long0);
      DefaultKeyedValue defaultKeyedValue1 = new DefaultKeyedValue("(codegen.java.lang.Comparable$MockitoMock$1810125580@0000000002, java.lang.Long@0000000003)", long0);
      boolean boolean0 = defaultKeyedValue0.equals(defaultKeyedValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short) (-2168));
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, short0);
      Object object0 = new Object();
      boolean boolean0 = defaultKeyedValue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      boolean boolean0 = defaultKeyedValue0.equals(defaultKeyedValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      Object object0 = defaultKeyedValue0.clone();
      assertTrue(object0.equals((Object)defaultKeyedValue0));
      
      defaultKeyedValue0.setValue((Number) null);
      boolean boolean0 = defaultKeyedValue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValue defaultKeyedValue0 = null;
      try {
        defaultKeyedValue0 = new DefaultKeyedValue((Comparable) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      Number number0 = defaultKeyedValue0.getValue();
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      defaultKeyedValue0.setValue((Number) null);
      Object object0 = defaultKeyedValue0.clone();
      boolean boolean0 = defaultKeyedValue0.equals(object0);
      assertNotSame(object0, defaultKeyedValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Float float0 = new Float(0.0F);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, float0);
      Comparable comparable1 = defaultKeyedValue0.getKey();
      assertNotNull(comparable1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6312L);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, long0);
      Object object0 = defaultKeyedValue0.clone();
      assertTrue(object0.equals((Object)defaultKeyedValue0));
      
      Integer integer0 = new Integer(3281);
      defaultKeyedValue0.setValue(integer0);
      boolean boolean0 = defaultKeyedValue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparable<DefaultKeyedValue> comparable0 = (Comparable<DefaultKeyedValue>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6312L);
      DefaultKeyedValue defaultKeyedValue0 = new DefaultKeyedValue(comparable0, long0);
      String string0 = defaultKeyedValue0.toString();
      assertNotNull(string0);
  }
}
