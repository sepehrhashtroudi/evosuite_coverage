/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:28:15 GMT 2022
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleHistogramBin_ESTest extends SimpleHistogramBin_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-714.158554), 1.0, false, false);
      simpleHistogramBin0.setItemCount((-1599));
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount(0);
      boolean boolean0 = simpleHistogramBin0.equals(object0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-782.307912), (-1.0), false, false);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-782.307912), 2216);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin1);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
      assertFalse(boolean0);
      assertEquals(2216.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-782.307912), simpleHistogramBin1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 522.7310073, false, false);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-3817), 0.0);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin1);
      assertFalse(boolean0);
      assertEquals((-3817.0), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0.0, simpleHistogramBin1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), 1.0, false, true);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramBin0.setSelected(true);
      boolean boolean0 = simpleHistogramBin0.isSelected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2209.53235898668), 0.0, false, true);
      double double0 = simpleHistogramBin0.getUpperBound();
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2209.53235898668), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2376.0), 2152.7495503958);
      double double0 = simpleHistogramBin0.getUpperBound();
      assertEquals(2152.7495503958, double0, 0.01);
      assertEquals((-2376.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 522.7310073, false, false);
      double double0 = simpleHistogramBin0.getLowerBound();
      assertEquals(522.7310073, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), 1811.066735289596, false, false);
      double double0 = simpleHistogramBin0.getLowerBound();
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1811.066735289596, simpleHistogramBin0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-782.307912), (-1.0), false, false);
      simpleHistogramBin0.setItemCount(2216);
      int int0 = simpleHistogramBin0.getItemCount();
      assertEquals(2216, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
      simpleHistogramBin0.setItemCount((-2157));
      int int0 = simpleHistogramBin0.getItemCount();
      assertEquals((-2157), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1233.970346841, 4196.2039069, false, false);
      // Undeclared exception!
      try { 
        simpleHistogramBin0.overlapsWith((SimpleHistogramBin) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin(1.0, 0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds; 1.0 to 0.0
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 522.7310073, false, false);
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      simpleHistogramBin1.setSelected(true);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin1);
      assertTrue(simpleHistogramBin1.isSelected());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 522.7310073, false, false);
      Object object0 = simpleHistogramBin0.clone();
      simpleHistogramBin0.setItemCount((-3817));
      boolean boolean0 = simpleHistogramBin0.equals(object0);
      assertEquals((-3817), simpleHistogramBin0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, false);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin1);
      assertFalse(boolean0);
      assertEquals((-419.77), simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-2754.144322175541), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 522.7310073, false, false);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(0.0, 522.7310073);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin1);
      assertEquals(0.0, simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(522.7310073, simpleHistogramBin1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-2754.144322175541), (-442.75943678547), true, false);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin1);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(boolean0);
      assertEquals((-442.75943678547), simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-2754.144322175541), simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-17.496469330837442), 0);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin1);
      assertEquals(0.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-17.496469330837442), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(boolean0);
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1.0, 392.078443);
      boolean boolean0 = simpleHistogramBin0.equals("p?~M}ES{uQ>*RKD*NF");
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(392.078443, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      boolean boolean0 = simpleHistogramBin0.equals(simpleHistogramBin0);
      assertEquals((-419.77), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-2754.144322175541), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-2754.144322175541), (-442.75943678547), true, false);
      int int0 = simpleHistogramBin0.compareTo(simpleHistogramBin1);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals((-2754.144322175541), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1423.3480965433257), (-1.0));
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1423.3480965433257), 0, true, false);
      int int0 = simpleHistogramBin0.compareTo(simpleHistogramBin1);
      assertEquals((-1), int0);
      assertEquals((-1423.3480965433257), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 2886.72659);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(1653.03893, 2886.72659);
      int int0 = simpleHistogramBin1.compareTo(simpleHistogramBin0);
      assertEquals(2886.72659, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals(1, int0);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 570.77216329);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-332.336544227), 0.0);
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      int int0 = simpleHistogramBin1.compareTo(simpleHistogramBin2);
      assertEquals((-1), int0);
      assertFalse(simpleHistogramBin2.isSelected());
      assertEquals(0, simpleHistogramBin2.getItemCount());
      assertEquals(570.77216329, simpleHistogramBin2.getUpperBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1.0, 392.078443);
      int int0 = simpleHistogramBin0.compareTo("WN6:Yl5");
      assertEquals(392.078443, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, int0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      int int0 = simpleHistogramBin0.compareTo(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2754.144322175541), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-419.77), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 570.77216329);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-332.336544227), 0.0);
      boolean boolean0 = simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      assertTrue(boolean0);
      assertEquals((-332.336544227), simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0, simpleHistogramBin1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2044.0), (-1809.4151));
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1809.4151), (-661.667462304671), false, true);
      boolean boolean0 = simpleHistogramBin1.overlapsWith(simpleHistogramBin0);
      assertFalse(simpleHistogramBin1.isSelected());
      assertFalse(boolean0);
      assertEquals((-661.667462304671), simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-1809.4151), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1.0, 990.8552);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1.0), 1.0, false, false);
      boolean boolean0 = simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      assertFalse(boolean0);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(1.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-1.0), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2044.0), (-1809.4151));
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1809.4151), (-661.667462304671), false, true);
      boolean boolean0 = simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      assertFalse(boolean0);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals((-661.667462304671), simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-1809.4151), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 570.77216329);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-332.336544227), 0.0);
      boolean boolean0 = simpleHistogramBin1.overlapsWith(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals((-332.336544227), simpleHistogramBin1.getLowerBound(), 0.01);
      assertTrue(boolean0);
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1.0, 990.8552);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-1.0), 1.0, false, false);
      boolean boolean0 = simpleHistogramBin1.overlapsWith(simpleHistogramBin0);
      assertFalse(boolean0);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals((-1.0), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), 1.0, true, true);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-2254.583185218326), (-1254.0));
      boolean boolean0 = simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      assertFalse(boolean0);
      assertEquals((-1254.0), simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-2254.583185218326), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin((-17.496469330837442), 0);
      boolean boolean0 = simpleHistogramBin0.overlapsWith(simpleHistogramBin1);
      assertFalse(boolean0);
      assertEquals(0.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals((-17.496469330837442), simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0, simpleHistogramBin1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), 1.0, true, true);
      boolean boolean0 = simpleHistogramBin0.overlapsWith(simpleHistogramBin0);
      assertTrue(boolean0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2254.583185218326), (-1254.0));
      boolean boolean0 = simpleHistogramBin0.accepts((-1254.0));
      assertTrue(boolean0);
      assertEquals((-1254.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2254.583185218326), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2754.144322175541), (-419.77), true, true);
      boolean boolean0 = simpleHistogramBin0.accepts((-442.75943678547));
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(boolean0);
      assertEquals((-419.77), simpleHistogramBin0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), 1.0, false, false);
      boolean boolean0 = simpleHistogramBin0.accepts(990.8552);
      assertFalse(boolean0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-1.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1233.970346841, 4196.2039069, false, false);
      boolean boolean0 = simpleHistogramBin0.accepts(1233.970346841);
      assertEquals(1233.970346841, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(4196.2039069, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1233.970346841, 4196.2039069, false, false);
      boolean boolean0 = simpleHistogramBin0.accepts(0.0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1233.970346841, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(4196.2039069, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin(18.402811380862445, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds; 18.402811380862445 to 1.0
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1233.970346841, 4196.2039069, false, false);
      double double0 = simpleHistogramBin0.getLowerBound();
      assertEquals(4196.2039069, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1233.970346841, double0, 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2044.0), (-1809.4151));
      double double0 = simpleHistogramBin0.getUpperBound();
      assertEquals((-1809.4151), double0, 0.01);
      assertEquals((-2044.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 570.77216329);
      boolean boolean0 = simpleHistogramBin0.isSelected();
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(570.77216329, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1423.3480965433257), (-1.0));
      int int0 = simpleHistogramBin0.getItemCount();
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-1423.3480965433257), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, int0);
  }
}
