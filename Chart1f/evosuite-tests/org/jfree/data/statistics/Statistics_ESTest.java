/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:29:05 GMT 2022
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.Statistics;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Statistics_ESTest extends Statistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Short short0 = new Short((short)0);
      numberArray0[1] = (Number) short0;
      Number[] numberArray1 = new Number[2];
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Number[] numberArray0 = new Number[8];
      Number[] numberArray1 = new Number[5];
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      Number[] numberArray1 = new Number[3];
      // Undeclared exception!
      try { 
        Statistics.getCorrelation(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'data1' and 'data2' arrays must have same length.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Number[] numberArray0 = new Number[6];
      Number[] numberArray1 = new Number[1];
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float((-3.028F));
      Number[] numberArray0 = new Number[4];
      numberArray0[0] = (Number) float0;
      numberArray0[1] = (Number) float0;
      numberArray0[2] = (Number) float0;
      numberArray0[3] = (Number) float0;
      Double double0 = new Double(Double.NaN);
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) float0;
      numberArray1[3] = (Number) double0;
      double[] doubleArray0 = Statistics.getLinearFit(numberArray0, numberArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Number[] numberArray1 = new Number[4];
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray0, numberArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Number[] numberArray1 = new Number[2];
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Statistics.getLinearFit(): array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, (-4097), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4097, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Number[] numberArray0 = new Number[6];
      Byte byte0 = new Byte((byte) (-1));
      numberArray0[5] = (Number) byte0;
      double double0 = Statistics.calculateMean(numberArray0, false);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0);
      linkedList0.push(double0);
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 1, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Number[] numberArray0 = new Number[9];
      numberArray0[0] = (Number) integer0;
      numberArray0[1] = (Number) integer0;
      numberArray0[2] = (Number) integer0;
      numberArray0[3] = (Number) integer0;
      numberArray0[4] = (Number) integer0;
      numberArray0[5] = (Number) integer0;
      numberArray0[6] = (Number) integer0;
      numberArray0[7] = (Number) integer0;
      numberArray0[8] = (Number) integer0;
      double double0 = Statistics.getStdDev(numberArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Long long0 = new Long(0L);
      numberArray0[0] = (Number) long0;
      Double double0 = new Double(0L);
      numberArray0[1] = (Number) double0;
      Byte byte0 = new Byte((byte)44);
      numberArray0[2] = (Number) byte0;
      Float float0 = new Float((-1227.3529F));
      numberArray0[3] = (Number) float0;
      double double1 = Statistics.getSlope(numberArray0, numberArray0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      double[][] doubleArray0 = Statistics.getMovingAverage(numberArray0, numberArray0, (byte)0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Number[] numberArray0 = new Number[6];
      Long long0 = new Long(843L);
      numberArray0[3] = (Number) long0;
      double double0 = Statistics.getCorrelation(numberArray0, numberArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Number[] numberArray0 = new Number[5];
      Short short0 = new Short((short) (-1));
      numberArray0[0] = (Number) short0;
      Byte byte0 = new Byte((byte)1);
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) byte0;
      double double0 = Statistics.getCorrelation(numberArray0, numberArray1);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      double double1 = Statistics.calculateMedian((List) linkedList0, false);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-114));
      linkedList0.add(byte0);
      double double0 = Statistics.calculateMedian((List) linkedList0, true);
      assertEquals(1, linkedList0.size());
      assertEquals((-114.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)29);
      linkedList0.add(byte0);
      double double0 = Statistics.calculateMedian((List) linkedList0, 0, 0, false);
      assertEquals(29.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      double double0 = Statistics.calculateMedian((List) linkedList0, 0, 0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(867.81422);
      linkedList0.addFirst(double0);
      double double1 = Statistics.calculateMedian((List) linkedList0, (int) (short)0, (int) (short)0);
      assertEquals(1, linkedList0.size());
      assertEquals(867.81422, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.offerFirst(integer0);
      double double0 = Statistics.calculateMedian((List) linkedList0, 0, 0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.add(byte0);
      double double0 = Statistics.calculateMedian((List) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)4);
      linkedList0.add(byte0);
      double double0 = Statistics.calculateMedian((List) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      Float float0 = new Float((-360.3F));
      numberArray0[0] = (Number) float0;
      Integer integer0 = new Integer(1390);
      numberArray0[1] = (Number) integer0;
      Byte byte0 = new Byte((byte)80);
      numberArray0[2] = (Number) byte0;
      double double0 = Statistics.calculateMean(numberArray0, true);
      assertEquals(369.90000406901044, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Number[] numberArray0 = new Number[5];
      numberArray0[0] = (Number) byte0;
      numberArray0[1] = (Number) byte0;
      numberArray0[2] = (Number) byte0;
      numberArray0[3] = (Number) byte0;
      numberArray0[4] = (Number) byte0;
      double double0 = Statistics.calculateMean(numberArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Long long0 = new Long(0L);
      numberArray0[0] = (Number) long0;
      numberArray0[1] = (Number) long0;
      Integer integer0 = new Integer(1);
      numberArray0[2] = (Number) integer0;
      Float float0 = new Float(1.0);
      numberArray0[3] = (Number) float0;
      double double0 = Statistics.calculateMean(numberArray0);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Long long0 = new Long(0L);
      numberArray0[0] = (Number) long0;
      Double double0 = new Double(0L);
      numberArray0[1] = (Number) double0;
      Byte byte0 = new Byte((byte)44);
      numberArray0[2] = (Number) byte0;
      Float float0 = new Float((-1227.3529F));
      numberArray0[3] = (Number) float0;
      double double1 = Statistics.calculateMean(numberArray0);
      assertEquals((-295.8382263183594), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(774.321209808);
      linkedList0.add(double0);
      double double1 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(774.321209808, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-972.68));
      linkedList0.add(float0);
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals((-972.6799926757812), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      double double0 = Statistics.calculateMean((Collection) linkedList0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)29);
      linkedList0.add(byte0);
      double double0 = Statistics.calculateMean((Collection) linkedList0);
      assertEquals(29.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Number[] numberArray0 = new Number[5];
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray0, (byte) (-122));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -122
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) null);
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) null, 1183, 3449, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 387, (-678), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1064
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 1249, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1247
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.offerFirst(object0);
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0, 0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.offerFirst((Byte) null);
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(",D=");
      // Undeclared exception!
      try { 
        Statistics.calculateMedian((List) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.addLast(byte0);
      double double0 = Statistics.calculateMedian((List) linkedList0, 0, 0, true);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)4);
      linkedList0.add(byte0);
      linkedList0.add(byte0);
      linkedList0.add(byte0);
      linkedList0.add(0, byte0);
      double double0 = Statistics.calculateMedian((List) linkedList0, true);
      assertEquals(4, linkedList0.size());
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      double double0 = Statistics.calculateMedian((List) linkedList0, true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = Statistics.calculateMedian((List) null, false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      double double1 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Long long0 = new Long(0L);
      numberArray0[0] = (Number) long0;
      numberArray0[1] = (Number) long0;
      Integer integer0 = new Integer(1);
      numberArray0[2] = (Number) integer0;
      Float float0 = new Float(1.0);
      numberArray0[3] = (Number) float0;
      double[][] doubleArray0 = Statistics.getMovingAverage(numberArray0, numberArray0, 2);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Number[] numberArray0 = new Number[5];
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray0, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period can't be longer than dataset.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Number[] numberArray1 = new Number[6];
      // Undeclared exception!
      try { 
        Statistics.getMovingAverage(numberArray0, numberArray1, (-2650));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Number[] numberArray0 = new Number[6];
      Number[] numberArray1 = new Number[9];
      // Undeclared exception!
      try { 
        Statistics.getCorrelation(numberArray1, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'data1' and 'data2' arrays must have same length.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      // Undeclared exception!
      try { 
        Statistics.getCorrelation(numberArray0, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data2' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      // Undeclared exception!
      try { 
        Statistics.getCorrelation((Number[]) null, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data1' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      Number[] numberArray1 = new Number[6];
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Number[] numberArray0 = new Number[6];
      // Undeclared exception!
      try { 
        Statistics.getSlope(numberArray0, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'yData' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.getSlope((Number[]) null, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xData' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Number[] numberArray0 = new Number[2];
      Number[] numberArray1 = new Number[3];
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray0, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Statistics.getLinearFit(): array lengths must be equal.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Number[] numberArray0 = new Number[3];
      // Undeclared exception!
      try { 
        Statistics.getLinearFit(numberArray0, (Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'yData' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Number[] numberArray0 = new Number[5];
      // Undeclared exception!
      try { 
        Statistics.getLinearFit((Number[]) null, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xData' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Long long0 = new Long(0L);
      numberArray0[0] = (Number) long0;
      numberArray0[1] = (Number) long0;
      Integer integer0 = new Integer(1);
      numberArray0[2] = (Number) integer0;
      Float float0 = new Float(1.0);
      numberArray0[3] = (Number) float0;
      double double0 = Statistics.getStdDev(numberArray0);
      assertEquals(0.5773502691896257, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Number[] numberArray0 = new Number[0];
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length 'data' array.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.getStdDev((Number[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' array.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double double0 = Statistics.calculateMedian((List) null, 1158, (-4474), false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(774.321209808);
      linkedList0.add(double0);
      linkedList0.offerLast(double0);
      linkedList0.offerFirst(double0);
      double double1 = Statistics.calculateMedian((List) linkedList0, false);
      assertEquals(774.321209808, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-114));
      linkedList0.add(byte0);
      linkedList0.add(byte0);
      double double0 = Statistics.calculateMedian((List) linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals((-114.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.add(double0);
      double double1 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      double double0 = Statistics.calculateMean((Collection) linkedList0, false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.offerFirst((Byte) null);
      double double0 = Statistics.calculateMean((Collection) linkedList0, true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-3604));
      linkedList0.addLast(short0);
      double double0 = Statistics.calculateMean((Collection) linkedList0);
      assertEquals((-3604.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Number[] numberArray0 = new Number[4];
      Long long0 = new Long(0L);
      numberArray0[0] = (Number) long0;
      double double0 = Statistics.calculateMean(numberArray0, false);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Number[] numberArray0 = new Number[6];
      // Undeclared exception!
      try { 
        Statistics.getStdDev(numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Number[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        Statistics.calculateMean((Collection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.data.statistics.Statistics", e);
      }
  }
}
