/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:35:32 GMT 2022
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.dnd.DropTarget;
import java.util.List;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultMultiValueCategoryDataset_ESTest extends DefaultMultiValueCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, 0, 0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)1);
      vector0.add(short0);
      vector0.add(short0);
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      Number number0 = defaultMultiValueCategoryDataset0.getValue(0, 0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Year year0 = new Year(0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) regularTimePeriod0, (Comparable) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (-1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (Thu Jan 01 00:00:00 GMT 1970) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      Year year0 = new Year();
      defaultMultiValueCategoryDataset0.add(vector0, year0, year0);
      List list0 = defaultMultiValueCategoryDataset0.getValues((Comparable) year0, (Comparable) year0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, 0, 0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-17));
      vector0.add(short0);
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      Number number0 = defaultMultiValueCategoryDataset0.getValue(0, 0);
      assertEquals((-17.0), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      Year year0 = new Year();
      defaultMultiValueCategoryDataset0.add(vector0, year0, year0);
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(year0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, 0, 0);
      Vector<Short> vector0 = new Vector<Short>();
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<Byte> vector0 = new Vector<Byte>();
      Byte byte0 = new Byte((byte)45);
      vector0.add(byte0);
      Minute minute0 = new Minute();
      defaultMultiValueCategoryDataset0.add(vector0, minute0, minute0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertEquals(45.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, 0, 0);
      Vector<Short> vector0 = new Vector<Short>();
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      Comparable comparable0 = defaultMultiValueCategoryDataset0.getColumnKey(0);
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      Year year0 = new Year();
      defaultMultiValueCategoryDataset0.add(vector0, year0, year0);
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(year0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.data = null;
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((-2358), (-2358));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues(0, 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValues((-2281), 2392);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue(0, 1100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((-47), (-47));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey((-2908));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnIndex((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DropTarget> vector0 = new Vector<DropTarget>();
      MockDate mockDate0 = new MockDate();
      defaultMultiValueCategoryDataset0.data = null;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0.0, Double.NaN, (-2752.4544915257), Double.NaN);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.add(vector0, oHLCDataItem0, oHLCDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Object object0 = new Object();
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1644);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)6);
      vector0.add(short0);
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      double double0 = defaultMultiValueCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      double double0 = defaultMultiValueCategoryDataset0.getRangeLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, 0, 0);
      Vector<Short> vector0 = new Vector<Short>();
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      Number number0 = defaultMultiValueCategoryDataset0.getValue(0, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, 0, 0);
      Vector<Short> vector0 = new Vector<Short>();
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      List list0 = defaultMultiValueCategoryDataset0.getValues(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, 0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)1);
      vector0.add(short0);
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      Year year0 = new Year(mockDate0, timeZone0);
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, year0);
      assertEquals(1, vector0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, (-11), 0);
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)1);
      vector0.add(short0);
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      double double0 = defaultMultiValueCategoryDataset0.getRangeLowerBound(true);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      vector0.add(defaultMultiValueCategoryDataset0);
      Year year0 = new Year();
      defaultMultiValueCategoryDataset0.add(vector0, year0, year0);
      assertEquals(2014, year0.getYear());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.add(stack0, (Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Float float0 = new Float((-2123.43F));
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.add((List) null, xYDataItem0, xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'values' argument.
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, (-11), 0);
      Vector<Short> vector0 = new Vector<Short>();
      defaultMultiValueCategoryDataset0.add(vector0, mockDate0, mockDate0);
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals(object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey(304);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 304, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(1644, (-11), 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(mockDate0, timeZone0);
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(year0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Year year0 = new Year();
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(year0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      MockDate mockDate0 = new MockDate(1836, (-9999), 2, 1836, 1, 1);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.add(list0, mockDate0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
         verifyException("org.jfree.data.statistics.DefaultMultiValueCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = defaultMultiValueCategoryDataset0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }
}
