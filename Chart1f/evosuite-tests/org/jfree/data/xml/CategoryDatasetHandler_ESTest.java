/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 19:49:53 GMT 2022
 */

package org.jfree.data.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.xml.CategoryDatasetHandler;
import org.junit.runner.RunWith;
import org.xml.sax.SAXException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryDatasetHandler_ESTest extends CategoryDatasetHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      categoryDatasetHandler0.pushSubHandler(defaultHandler0);
      DefaultHandler defaultHandler1 = categoryDatasetHandler0.popSubHandler();
      categoryDatasetHandler0.pushSubHandler(defaultHandler1);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      categoryDatasetHandler0.startElement("CategoryDataset", "p:DLGK&z<M*M", "&~5` j", attributesImpl0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      categoryDatasetHandler0.startElement("N", "N", "CategoryDataset", attributes2Impl0);
      CategoryDataset categoryDataset0 = categoryDatasetHandler0.getDataset();
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      // Undeclared exception!
      try { 
        categoryDatasetHandler0.startElement("bQ", "?`(#>&W ", (String) null, attributes2Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      categoryDatasetHandler0.startElement("Series", "Series", "Series", attributes2Impl0);
      // Undeclared exception!
      try { 
        categoryDatasetHandler0.endElement("Series", "Series", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      CategoryDatasetHandler categoryDatasetHandler1 = new CategoryDatasetHandler();
      categoryDatasetHandler0.pushSubHandler(categoryDatasetHandler1);
      categoryDatasetHandler0.endElement("Series", "6q", "Element not recognised: ");
      assertFalse(categoryDatasetHandler0.equals((Object)categoryDatasetHandler1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      categoryDatasetHandler0.endElement("Series", "6q", "Element not recognised: ");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      try { 
        categoryDatasetHandler0.startElement((String) null, (String) null, "E5QznA9n)Y1p G;", attributes2Impl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Element not recognised: E5QznA9n)Y1p G;
         //
         verifyException("org.jfree.data.xml.CategoryDatasetHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      categoryDatasetHandler0.startElement("P~yTrLrk8@s|", (String) null, "Series", attributes2Impl0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      categoryDatasetHandler0.startElement("6q", "[oOO_Q-J_1QWiN", "CategoryDataset", attributes2Impl0);
      Long long0 = new Long(896L);
      categoryDatasetHandler0.addItem("", "CategoryDataset", long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      CategoryDataset categoryDataset0 = categoryDatasetHandler0.getDataset();
      assertNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryDatasetHandler categoryDatasetHandler0 = new CategoryDatasetHandler();
      Long long0 = new Long(896L);
      // Undeclared exception!
      try { 
        categoryDatasetHandler0.addItem("", "CategoryDataset", long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xml.CategoryDatasetHandler", e);
      }
  }
}
