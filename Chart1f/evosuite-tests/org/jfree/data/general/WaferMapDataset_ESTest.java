/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:08:46 GMT 2022
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.Set;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.time.FixedMillisecond;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WaferMapDataset_ESTest extends WaferMapDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Short short0 = new Short((short)704);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-4952), (-4952), short0);
      waferMapDataset0.addValue(2, (-4952), (-4952));
      boolean boolean0 = waferMapDataset0.isMinValue(short0);
      assertFalse(boolean0);
      assertEquals((-4952), waferMapDataset0.getMaxChipX());
      assertEquals((-4952), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-3346), short0);
      waferMapDataset0.addValue(31, 354, 0);
      waferMapDataset0.addValue((-2146601362), 0, 0);
      Number number0 = waferMapDataset0.getChipValue(0, 0);
      assertEquals((-3346), waferMapDataset0.getMaxChipY());
      assertEquals((-2.146601362E9), number0);
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1, 1);
      waferMapDataset0.addValue(2145029380, 1, 2145029380);
      waferMapDataset0.addValue((-1), (-842), 1);
      Number number0 = waferMapDataset0.getChipValue((-842), 1);
      assertNotNull(number0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals((-1.0), number0);
      assertEquals(1, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long((-1));
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), long0);
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals(Double.POSITIVE_INFINITY, number0);
      
      waferMapDataset0.setValue(number0, long0, long0);
      waferMapDataset0.addValue((-1), 0, (-1));
      Number number1 = waferMapDataset0.getChipValue(0, 0);
      assertNull(number1);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-2147017411), (-2625));
      waferMapDataset0.addValue(0, 2397, 0);
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals(0.0, number0);
      assertEquals((-2625), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals((-2147017411), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      Number number0 = waferMapDataset0.getMaxValue();
      waferMapDataset0.setValue(number0, integer0, "4294967295");
      Number number1 = waferMapDataset0.getMinValue();
      assertEquals(Double.NEGATIVE_INFINITY, number1);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Short short0 = new Short((short)704);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-4952), (-4952), short0);
      waferMapDataset0.addValue(2, (-4952), (-4952));
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals(2.0, number0);
      assertEquals((-4952), waferMapDataset0.getMaxChipX());
      assertEquals((-4952), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-2011), short0);
      waferMapDataset0.addValue(0, 0, 0);
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
      assertEquals(0.0, number0);
      assertEquals((-2011), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Float float0 = new Float(1173.284354);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1203, 1203, float0);
      waferMapDataset0.addValue(2166, 1, 244);
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(1203, waferMapDataset0.getMaxChipX());
      assertEquals(2166.0, number0);
      assertEquals(1203, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1876, 1876);
      waferMapDataset0.addValue((-2066), 209, 1);
      Number number0 = waferMapDataset0.getMaxValue();
      assertEquals(1876, waferMapDataset0.getMaxChipX());
      assertEquals(1876, waferMapDataset0.getMaxChipY());
      assertEquals((-2066.0), number0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(0, int0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 366, (Number) null);
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(366, int0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-173));
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals((-173), waferMapDataset0.getMaxChipY());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1670, 1670);
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals(1670, waferMapDataset0.getMaxChipY());
      assertEquals(1670, int0);
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3347), (-2011), short0);
      waferMapDataset0.addValue(274, 0, 0);
      Number number0 = waferMapDataset0.getChipValue(0, 0);
      assertEquals((-3347), waferMapDataset0.getMaxChipX());
      assertNotNull(number0);
      assertEquals(274.0, number0);
      assertEquals((-2011), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-2011), short0);
      waferMapDataset0.addValue(0, 0, 0);
      Number number0 = waferMapDataset0.getChipValue(0, 0);
      assertEquals(0.0, number0);
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
      assertEquals((-2011), waferMapDataset0.getMaxChipY());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      waferMapDataset0.setChipSpace(0);
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = new Long((-622));
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-622), (-622), long0);
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals((-622.0), double0, 0.01);
      assertEquals((-622), waferMapDataset0.getMaxChipY());
      assertEquals((-622), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1259, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue((Number) null, fixedMillisecond0, fixedMillisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue(integer0, (Comparable) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-1532), bigInteger0);
      // Undeclared exception!
      try { 
        waferMapDataset0.setValue(bigInteger0, bigInteger0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to java.lang.Double
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Short short0 = new Short((short)704);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-4952), (-4952), short0);
      // Undeclared exception!
      try { 
        waferMapDataset0.isMinValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 366, (Number) null);
      // Undeclared exception!
      try { 
        waferMapDataset0.isMaxValue((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Short short0 = new Short((short)1);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(Integer.MAX_VALUE, Integer.MAX_VALUE, short0);
      waferMapDataset0.addValue((int) (short)1, 158, (int) (short)1);
      waferMapDataset0.setValue(short0, short0, short0);
      // Undeclared exception!
      try { 
        waferMapDataset0.getUniqueValues();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Short
         //
         verifyException("java.lang.Short", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      // Undeclared exception!
      try { 
        waferMapDataset0.getChipValue((Comparable) null, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Float float0 = new Float((float) 2018);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2018, 2018, float0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockDate mockDate0 = new MockDate(2018);
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) bigInteger0, (Comparable) null, (Comparable) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-4948), (short)663);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to java.lang.Double
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1), (-1), integer0);
      boolean boolean0 = waferMapDataset0.isMinValue(integer0);
      assertTrue(boolean0);
      assertEquals((-1), waferMapDataset0.getMaxChipX());
      assertEquals((-1), waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Float float0 = new Float((float) 2018);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(2018, 2018, float0);
      Number number0 = waferMapDataset0.getMinValue();
      assertEquals(Double.POSITIVE_INFINITY, number0);
      
      waferMapDataset0.setValue(number0, float0, float0);
      boolean boolean0 = waferMapDataset0.isMaxValue(number0);
      assertEquals(2018, waferMapDataset0.getMaxChipX());
      assertEquals(2018, waferMapDataset0.getMaxChipY());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-2011), short0);
      boolean boolean0 = waferMapDataset0.isMaxValue(short0);
      assertEquals((-2011), waferMapDataset0.getMaxChipY());
      assertTrue(boolean0);
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      Number number0 = waferMapDataset0.getMaxValue();
      waferMapDataset0.setValue(number0, integer0, "4294967295");
      Number number1 = waferMapDataset0.getChipValue((Comparable) integer0, (Comparable) "4294967295");
      assertNotNull(number1);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(Double.NEGATIVE_INFINITY, number1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      waferMapDataset0.getChipValue((Comparable) "aep", (Comparable) integer0);
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0, waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-2838), (-2838), integer0);
      Number number0 = waferMapDataset0.getMinValue();
      waferMapDataset0.setValue(number0, "4294964458", integer0);
      Number number1 = waferMapDataset0.getChipValue((Comparable) "4294964458", (Comparable) integer0);
      assertNotNull(number1);
      assertEquals((-2838), waferMapDataset0.getMaxChipX());
      assertEquals((-2838), waferMapDataset0.getMaxChipY());
      assertEquals(Double.POSITIVE_INFINITY, number1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0, integer0);
      Double double0 = (Double)waferMapDataset0.getMaxValue();
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      
      waferMapDataset0.setValue(double0, integer0, "4294967295");
      Double double1 = (Double)waferMapDataset0.getChipValue((Comparable) integer0, (Comparable) double0);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-3346), short0);
      waferMapDataset0.addValue(31, 354, 0);
      int int0 = waferMapDataset0.getUniqueValueCount();
      assertEquals((-3346), waferMapDataset0.getMaxChipY());
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1977), (-1977));
      waferMapDataset0.addValue((-1977), 2375, (-1977));
      Long long0 = new Long((-1977));
      waferMapDataset0.addValue((Number) long0, (Comparable) "?ut7DpiY-\"iARy={3", (Comparable) "?ut7DpiY-\"iARy={3");
      // Undeclared exception!
      try { 
        waferMapDataset0.getUniqueValueCount();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1, 1);
      waferMapDataset0.addValue(2145029380, 1, 2145029380);
      waferMapDataset0.addValue((-1), (-842), 1);
      Set set0 = waferMapDataset0.getUniqueValues();
      assertEquals(2, set0.size());
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-2011), short0);
      // Undeclared exception!
      try { 
        waferMapDataset0.addValue((Number) null, (Comparable) short0, (Comparable) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.WaferMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-3346), short0);
      waferMapDataset0.setMaxChipX((-3346));
      assertEquals((-3346), waferMapDataset0.getMaxChipY());
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-3346), short0);
      int int0 = waferMapDataset0.getMaxChipX();
      assertEquals((-3346), waferMapDataset0.getMaxChipY());
      assertEquals((-3346), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-3346), short0);
      int int0 = waferMapDataset0.getMaxChipY();
      assertEquals((-3346), int0);
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-3346), short0);
      double double0 = waferMapDataset0.getChipSpace();
      assertEquals((-3346), waferMapDataset0.getMaxChipX());
      assertEquals((-3346), waferMapDataset0.getMaxChipY());
      assertEquals(31.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Short short0 = new Short((short)31);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-3346), (-3346), short0);
      waferMapDataset0.setMaxChipY(32);
      assertEquals(32, waferMapDataset0.getMaxChipY());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1, 1);
      waferMapDataset0.getUniqueValueCount();
      assertEquals(1.0, waferMapDataset0.getChipSpace(), 0.01);
      assertEquals(1, waferMapDataset0.getMaxChipX());
      assertEquals(1, waferMapDataset0.getMaxChipY());
  }
}
