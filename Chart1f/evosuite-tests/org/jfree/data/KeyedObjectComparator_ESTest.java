/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:13:06 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.KeyedObject;
import org.jfree.data.KeyedObjectComparator;
import org.jfree.data.KeyedObjectComparatorType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyedObjectComparator_ESTest extends KeyedObjectComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      Integer integer0 = new Integer((-1));
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, integer0);
      KeyedObject keyedObject1 = new KeyedObject((Comparable) null, "A2f(5u!~");
      // Undeclared exception!
      try { 
        keyedObjectComparator0.compare(keyedObject0, keyedObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      Integer integer0 = Integer.getInteger((String) null, (Integer) null);
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, integer0);
      KeyedObject keyedObject1 = new KeyedObject((Comparable) null, "A2!(5uQ~");
      // Undeclared exception!
      try { 
        keyedObjectComparator0.compare(keyedObject0, keyedObject1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.KeyedObjectComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      KeyedObject keyedObject0 = new KeyedObject(comparable0, sortOrder0);
      Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObject keyedObject1 = new KeyedObject(comparable1, "\"Zg_E>9VSTiX");
      int int0 = keyedObjectComparator0.compare(keyedObject0, keyedObject1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator((KeyedObjectComparatorType) null, sortOrder0);
      KeyedObjectComparatorType keyedObjectComparatorType0 = keyedObjectComparator0.getType();
      assertNull(keyedObjectComparatorType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      KeyedObject keyedObject1 = new KeyedObject((Comparable) null, "A2!(5uQ~");
      int int0 = keyedObjectComparator0.compare(keyedObject0, keyedObject1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, (Object) null);
      int int0 = keyedObjectComparator0.compare(keyedObject0, keyedObject0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator((KeyedObjectComparatorType) null, sortOrder0);
      Integer integer0 = Integer.getInteger((String) null, (Integer) null);
      KeyedObject keyedObject0 = new KeyedObject((Comparable) null, integer0);
      // Undeclared exception!
      try { 
        keyedObjectComparator0.compare(keyedObject0, keyedObject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised type.
         //
         verifyException("org.jfree.data.KeyedObjectComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      KeyedObject keyedObject0 = new KeyedObject(comparable0, sortOrder0);
      int int0 = keyedObjectComparator0.compare(keyedObject0, keyedObject0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      Object object0 = new Object();
      int int0 = keyedObjectComparator0.compare((Object) null, object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_VALUE;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      int int0 = keyedObjectComparator0.compare((Object) null, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_VALUE;
      KeyedObjectComparator keyedObjectComparator0 = null;
      try {
        keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, (SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.data.KeyedObjectComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      SortOrder sortOrder1 = keyedObjectComparator0.getOrder();
      assertSame(sortOrder1, sortOrder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyedObjectComparatorType keyedObjectComparatorType0 = KeyedObjectComparatorType.BY_KEY;
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      KeyedObjectComparator keyedObjectComparator0 = new KeyedObjectComparator(keyedObjectComparatorType0, sortOrder0);
      KeyedObjectComparatorType keyedObjectComparatorType1 = keyedObjectComparator0.getType();
      assertEquals("KeyedObjectComparatorType.BY_KEY", keyedObjectComparatorType1.toString());
  }
}
