/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:30:57 GMT 2022
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.xy.Vector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector_ESTest extends Vector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector vector0 = new Vector((-1.0), 509.5007897616);
      Vector vector1 = new Vector((-1.0), 1.0);
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
      assertEquals(2.356194490192345, vector1.getAngle(), 0.01);
      assertFalse(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector vector0 = new Vector(1859.13511354263, 1.0);
      Vector vector1 = new Vector(1.0, 1.0);
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
      assertEquals(5.378844691145507E-4, vector0.getAngle(), 0.01);
      assertFalse(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      double double0 = vector0.getY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector vector0 = new Vector((-312.116), (-1622.9723421557917));
      double double0 = vector0.getY();
      assertEquals((-1622.9723421557917), double0, 0.01);
      assertEquals((-1.7607881406908399), vector0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector vector0 = new Vector(0.0, (-1.0));
      double double0 = vector0.getX();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), vector0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector vector0 = new Vector(2362.44, (-1581.104693974));
      double double0 = vector0.getX();
      assertEquals(2362.44, double0, 0.01);
      assertEquals((-0.5898011312016683), vector0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector vector0 = new Vector(0.0, 0.0);
      double double0 = vector0.getLength();
      assertEquals(0.0, vector0.getAngle(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector vector0 = new Vector(4972.684165091587, 0.0);
      double double0 = vector0.getAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4972.684165091587, vector0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector vector0 = new Vector(347.8633, 745.392);
      double double0 = vector0.getAngle();
      assertEquals(1.1341540743579266, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector vector0 = new Vector(658.961758019114, 658.961758019114);
      Vector vector1 = new Vector(658.961758019114, 658.961758019114);
      boolean boolean0 = vector0.equals(vector1);
      assertTrue(boolean0);
      assertEquals(0.7853981633974483, vector1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector vector0 = new Vector((-910.3706867732881), (-910.3706867732881));
      Vector vector1 = new Vector((-2.356194490192345), (-2.356194490192345));
      boolean boolean0 = vector0.equals(vector1);
      assertEquals((-2.356194490192345), vector1.getAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector vector0 = new Vector((-312.116), (-1622.9723421557917));
      boolean boolean0 = vector0.equals("X$GVsg7Em^TE<?Ed|");
      assertEquals((-1.7607881406908399), vector0.getAngle(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector vector0 = new Vector((-2950.885576284036), (-2950.885576284036));
      boolean boolean0 = vector0.equals(vector0);
      assertEquals((-2.356194490192345), vector0.getAngle(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector vector0 = new Vector((-551.0057274638853), (-551.0057274638853));
      Vector vector1 = new Vector((-551.0057274638853), 0.44217437645127267);
      boolean boolean0 = vector0.equals(vector1);
      assertFalse(boolean0);
      assertFalse(vector1.equals((Object)vector0));
      assertEquals(3.1407901677725065, vector1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector vector0 = new Vector((-551.0057274638853), (-551.0057274638853));
      vector0.hashCode();
      assertEquals((-2.356194490192345), vector0.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector vector0 = new Vector((-2950.885576284036), (-2950.885576284036));
      double double0 = vector0.getLength();
      assertEquals((-2.356194490192345), vector0.getAngle(), 0.01);
      assertEquals(4173.18240299203, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector vector0 = new Vector((-910.3706867732881), (-910.3706867732881));
      double double0 = vector0.getAngle();
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector vector0 = new Vector((-551.0057274638853), (-551.0057274638853));
      double double0 = vector0.getX();
      assertEquals((-551.0057274638853), double0, 0.01);
      assertEquals((-551.0057274638853), vector0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector vector0 = new Vector(658.961758019114, 658.961758019114);
      double double0 = vector0.getY();
      assertEquals(658.961758019114, double0, 0.01);
      assertEquals(658.961758019114, vector0.getX(), 0.01);
  }
}
