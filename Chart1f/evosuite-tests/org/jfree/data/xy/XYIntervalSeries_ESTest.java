/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 21:20:38 GMT 2022
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYIntervalDataItem;
import org.jfree.data.xy.XYIntervalSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYIntervalSeries_ESTest extends XYIntervalSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(0L, 0L, 0L, 0L, 0L, 0L);
      double double0 = xYIntervalSeries0.getYValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, true, true);
      xYIntervalSeries0.add(0L, 1562.942136003323, Double.NaN, 1232.17984, Double.NaN, 0.0);
      double double0 = xYIntervalSeries0.getYValue(0);
      assertEquals(1232.17984, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(Double.POSITIVE_INFINITY, 495.817778168, (-576.0), (-576.0), 2358.5, (-576.0));
      double double0 = xYIntervalSeries0.getYValue(0);
      assertEquals((-576.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 0L, (double) 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYDataItem0);
      xYIntervalSeries0.add(0.0, 0L, 0.0, 0.0, 0.0, 0.0);
      double double0 = xYIntervalSeries0.getYLowValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, true, true);
      xYIntervalSeries0.add(0L, 1562.942136003323, 1562.942136003323, 1562.942136003323, 1562.942136003323, 0.0);
      double double0 = xYIntervalSeries0.getYLowValue(0);
      assertEquals(1562.942136003323, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-20L), (-20L));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add((-20L), (-20L), (-20L), (-20L), (-20L), (-20L));
      double double0 = xYIntervalSeries0.getYLowValue(0);
      assertEquals((-20.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, true, true);
      xYIntervalSeries0.add(0L, 1562.942136003323, Double.NaN, 1232.17984, Double.NaN, 0.0);
      double double0 = xYIntervalSeries0.getYHighValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, true, true);
      xYIntervalSeries0.add(0L, 1562.942136003323, Double.NaN, 1232.17984, Double.NaN, 1562.942136003323);
      double double0 = xYIntervalSeries0.getYHighValue(0);
      assertEquals(1562.942136003323, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(Double.POSITIVE_INFINITY, 495.817778168, (-576.0), (-576.0), 2358.5, (-576.0));
      double double0 = xYIntervalSeries0.getYHighValue(0);
      assertEquals((-576.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minute minute0 = new Minute();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(minute0, false, true);
      xYIntervalSeries0.add(0.0, 0, 1380.4824521241123, 0.0, (-1.0), 1143.6427);
      double double0 = xYIntervalSeries0.getXLowValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(Double.POSITIVE_INFINITY, 495.817778168, (-576.0), (-576.0), 2358.5, (-576.0));
      double double0 = xYIntervalSeries0.getXLowValue(0);
      assertEquals(495.817778168, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-20L), (-20L));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add((-20L), (-20L), (-20L), (-20L), (-20L), (-20L));
      double double0 = xYIntervalSeries0.getXLowValue(0);
      assertEquals((-20.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Quarter quarter0 = new Quarter(mockDate0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0, false, false);
      xYIntervalSeries0.add(0, 4, 0, (-2462.1090460253386), 4, (-2426.471));
      double double0 = xYIntervalSeries0.getXHighValue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Quarter quarter0 = new Quarter(mockDate0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0, true, true);
      xYIntervalSeries0.add(0, 4, 1.0, (-2462.1090460253386), 4, (-2426.471));
      double double0 = xYIntervalSeries0.getXHighValue(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(Double.POSITIVE_INFINITY, 495.817778168, (-576.0), (-576.0), 2358.5, (-576.0));
      double double0 = xYIntervalSeries0.getXHighValue(0);
      assertEquals((-576.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-20L), (-20L));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add((-20L), (-20L), (-20L), (-20L), (-20L), (-20L));
      Number number0 = xYIntervalSeries0.getX(0);
      assertEquals((-20.0), number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2L, 2L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(2L, 2L, 2L, 2L, 2L, 2L);
      Number number0 = xYIntervalSeries0.getX(0);
      assertEquals(2.0, number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(Double.POSITIVE_INFINITY, 495.817778168, (-576.0), (-576.0), 2358.5, (-576.0));
      XYIntervalDataItem xYIntervalDataItem0 = (XYIntervalDataItem)xYIntervalSeries0.getDataItem(0);
      assertEquals(Double.POSITIVE_INFINITY, xYIntervalDataItem0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1485L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3130), "f$MuXU$_&=[Mo]*E{m|");
      Locale locale0 = Locale.GERMANY;
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(year0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYValue((-2193));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYLowValue((-1933));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, true, true);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYHighValue((-3853));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, 0.0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(timeSeriesDataItem0, false, true);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXLowValue((-2221));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-493), 0);
      Quarter quarter0 = new Quarter(mockDate0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(quarter0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXHighValue((-493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getX(2958465);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958465, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Short short0 = new Short((short)1);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(xYDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getDataItem(120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(0L, 1562.942136003323, Double.NaN, 1562.942136003323, Double.NaN, 0.0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.add(0L, 0.0, 0L, 0L, (-2120.687), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.ComparableObjectSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYIntervalSeries xYIntervalSeries0 = null;
      try {
        xYIntervalSeries0 = new XYIntervalSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYIntervalSeries xYIntervalSeries0 = null;
      try {
        xYIntervalSeries0 = new XYIntervalSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2322));
      TimeZone timeZone0 = TimeZone.getDefault();
      Second second0 = new Second(mockDate0, timeZone0);
      Millisecond millisecond0 = new Millisecond((-2322), second0);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(millisecond0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getDataItem((-610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYHighValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXHighValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      xYIntervalSeries0.add(0L, 0L, 0L, 0L, 0L, 0L);
      Number number0 = xYIntervalSeries0.getX(0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-20L), (-20L));
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYLowValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getXLowValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getYValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1260), 60, 60);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1260), (-1260), 0.0, 0.0, 0.5);
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(oHLCDataItem0);
      // Undeclared exception!
      try { 
        xYIntervalSeries0.getX((-130));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
