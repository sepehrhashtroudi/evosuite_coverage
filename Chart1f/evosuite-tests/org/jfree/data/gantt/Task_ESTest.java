/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 20:19:39 GMT 2022
 */

package org.jfree.data.gantt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.gantt.Task;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Task_ESTest extends Task_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(274, 274, 274, 274, 274);
      Task task0 = new Task("j8FDeRW3J", mockDate0, mockDate0);
      Year year0 = new Year();
      Week week0 = new Week(274, year0);
      Task task1 = new Task("j8FDeRW3J", week0);
      task1.removeSubtask(task0);
      assertEquals(0, task1.getSubtaskCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Task task0 = new Task("tUs3Cx", mockDate0, mockDate0);
      Task task1 = new Task("Hr-k", mockDate0, mockDate0);
      task1.addSubtask(task0);
      Task task2 = task1.getSubtask(0);
      assertEquals(0, task2.getSubtaskCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week((-2664), (-2664));
      Task task0 = new Task("p~)evX;#l", week0);
      task0.addSubtask(task0);
      Task task1 = task0.getSubtask(0);
      assertNull(task1.getPercentComplete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week((-2664), (-2664));
      Task task0 = new Task("p~)evX;#l", week0);
      Double double0 = new Double(820.869);
      task0.setPercentComplete(double0);
      Double double1 = task0.getPercentComplete();
      assertEquals(820.869, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Task task0 = new Task("tUs3Cx", mockDate0, mockDate0);
      Double double0 = new Double((-889L));
      task0.setPercentComplete(double0);
      Double double1 = task0.getPercentComplete();
      assertEquals((-889.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Task task0 = new Task("SpreadsheetDate: Serial must be in range 2 to 2958465.", (TimePeriod) null);
      TimePeriod timePeriod0 = task0.getDuration();
      assertNull(timePeriod0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Task task0 = new Task("vk1Noo]#bO*,KZDV", (TimePeriod) null);
      String string0 = task0.getDescription();
      assertEquals("vk1Noo]#bO*,KZDV", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(47L);
      Year year0 = new Year(mockDate0);
      Task task0 = new Task("", year0);
      // Undeclared exception!
      try { 
        task0.getSubtask((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      Task task1 = new Task("", (TimePeriod) null);
      task0.addSubtask(task1);
      task1.addSubtask(task0);
      // Undeclared exception!
      try { 
        task1.equals(task0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(458);
      Date date0 = spreadsheetDate0.toDate();
      Task task0 = null;
      try {
        task0 = new Task("4Cz>^\u0004qK^", date0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Task task0 = null;
      try {
        task0 = new Task((String) null, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.data.gantt.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(2666L);
      Date date0 = Date.from(instant0);
      Quarter quarter0 = new Quarter(date0);
      Task task0 = new Task("Invalid 'day' argument.", quarter0);
      Object object0 = task0.clone();
      boolean boolean0 = task0.equals(object0);
      assertNotSame(object0, task0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(274, 274, 274, 274, 274);
      Task task0 = new Task("j8FDeRW3J", mockDate0, mockDate0);
      Year year0 = new Year();
      Week week0 = new Week(274, year0);
      Task task1 = new Task("j8FDeRW3J", week0);
      boolean boolean0 = task1.equals(task0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      Task task1 = new Task("", (TimePeriod) null);
      task0.setDescription("=I<88Lf]X6DU|5HY");
      boolean boolean0 = task1.equals(task0);
      assertFalse(task1.equals((Object)task0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Task task0 = new Task("org.jfree.data.time.Week", (TimePeriod) null);
      boolean boolean0 = task0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      boolean boolean0 = task0.equals(task0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      Task task1 = new Task("", (TimePeriod) null);
      assertTrue(task1.equals((Object)task0));
      
      task0.addSubtask(task1);
      boolean boolean0 = task1.equals(task0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Task task0 = new Task("G(AHsBK -]&", mockDate0, mockDate0);
      // Undeclared exception!
      try { 
        task0.addSubtask((Task) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtask' argument.
         //
         verifyException("org.jfree.data.gantt.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      task0.addSubtask(task0);
      int int0 = task0.getSubtaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minute minute0 = new Minute();
      Task task0 = new Task("", minute0);
      // Undeclared exception!
      try { 
        task0.setDescription((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.data.gantt.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-14), (-14), (-14));
      Task task0 = null;
      try {
        task0 = new Task((String) null, mockDate0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'description' argument.
         //
         verifyException("org.jfree.data.gantt.Task", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(274, 274, 274, 274, 274);
      Task task0 = new Task("j8FDeRW3J", mockDate0, mockDate0);
      SimpleTimePeriod simpleTimePeriod0 = (SimpleTimePeriod)task0.getDuration();
      assertEquals(7182830040000L, simpleTimePeriod0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(2666L);
      Date date0 = Date.from(instant0);
      Quarter quarter0 = new Quarter(date0);
      Task task0 = new Task("Invalid 'day' argument.", quarter0);
      Task task1 = (Task)task0.clone();
      assertTrue(task1.equals((Object)task0));
      
      Double double0 = new Double(4);
      task1.setPercentComplete(double0);
      boolean boolean0 = task0.equals(task1);
      assertFalse(boolean0);
      assertFalse(task1.equals((Object)task0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(274, 274, 274, 274, 274);
      Task task0 = new Task("j8FDeRW3J", mockDate0, mockDate0);
      task0.setPercentComplete((double) 1);
      assertEquals(1.0, task0.getPercentComplete(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      Double double0 = task0.getPercentComplete();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      // Undeclared exception!
      try { 
        task0.getSubtask(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      int int0 = task0.getSubtaskCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      Double double0 = new Double(0.0);
      task0.setPercentComplete(double0);
      Double double1 = task0.getPercentComplete();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Task task0 = new Task("", (TimePeriod) null);
      String string0 = task0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(2666L);
      Date date0 = Date.from(instant0);
      Quarter quarter0 = new Quarter(date0);
      Task task0 = new Task("Invalid 'day' argument.", quarter0);
      task0.setDuration(quarter0);
      assertEquals(1970, quarter0.getYearValue());
  }
}
