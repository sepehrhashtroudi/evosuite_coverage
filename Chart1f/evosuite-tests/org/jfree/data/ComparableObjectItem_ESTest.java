/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 26 19:59:37 GMT 2022
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.data.ComparableObjectItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparableObjectItem_ESTest extends ComparableObjectItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, (Object) null);
      Object object0 = comparableObjectItem0.getObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-544)).when(comparable0).compareTo(any());
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      int int0 = comparableObjectItem0.compareTo(comparableObjectItem0);
      assertEquals((-544), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparable0, comparableObjectItem0);
      comparableObjectItem0.setObject(comparableObjectItem1);
      // Undeclared exception!
      try { 
        comparableObjectItem1.equals(comparableObjectItem0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem("", object0);
      // Undeclared exception!
      try { 
        comparableObjectItem1.compareTo(comparableObjectItem0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      boolean boolean0 = comparableObjectItem0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      comparableObjectItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, (Object) null);
      comparableObjectItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      Object object1 = comparableObjectItem0.clone();
      assertTrue(object1.equals((Object)comparableObjectItem0));
      
      Object object2 = new Object();
      comparableObjectItem0.setObject(object2);
      boolean boolean0 = comparableObjectItem0.equals(object1);
      assertFalse(object1.equals((Object)comparableObjectItem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, object0);
      Object object1 = comparableObjectItem0.clone();
      boolean boolean0 = comparableObjectItem0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      boolean boolean0 = comparableObjectItem0.equals(comparableObjectItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      Object object0 = new Object();
      ComparableObjectItem comparableObjectItem1 = new ComparableObjectItem(comparableObjectItem0, object0);
      boolean boolean0 = comparableObjectItem1.equals(comparableObjectItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      int int0 = comparableObjectItem0.compareTo(comparableObjectItem0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      Object object0 = new Object();
      int int0 = comparableObjectItem0.compareTo(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComparableObjectItem comparableObjectItem0 = null;
      try {
        comparableObjectItem0 = new ComparableObjectItem((Comparable) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.ComparableObjectItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      Comparable comparable1 = comparableObjectItem0.getComparable();
      assertNotNull(comparable1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      ComparableObjectItem comparableObjectItem0 = new ComparableObjectItem(comparable0, comparable0);
      Object object0 = comparableObjectItem0.getObject();
      assertNotNull(object0);
  }
}
