/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:30:12 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;
import com.google.gson.stream.JsonReader;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonParser_ESTest extends JsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      JsonElement jsonElement0 = jsonParser0.parse("com.google.gson.JsonParser");
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      JsonElement jsonElement0 = jsonParser0.parse("");
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      JsonArray jsonArray0 = (JsonArray)jsonParser0.parse("[RJ]/9j Z");
      assertEquals(1, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      JsonElement jsonElement0 = jsonParser0.parse("{}jWj nbZ&hx3\"u");
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("{}*+.=bI");
      JsonElement jsonElement0 = jsonParser0.parse((Reader) stringReader0);
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("");
      JsonElement jsonElement0 = jsonParser0.parse((Reader) stringReader0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("[t~;jVjy]HM{:-l]_c5");
      JsonElement jsonElement0 = jsonParser0.parse((Reader) stringReader0);
      assertTrue(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("{}jWj nbZ&hx3\"u");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonParser0.parse(jsonReader0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonParser0.parse(jsonReader0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("[t~;jVjy]HM{:-l]_c5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonParser0.parse(jsonReader0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      // Undeclared exception!
      try { 
        jsonParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      // Undeclared exception!
      try { 
        jsonParser0.parse("/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      // Undeclared exception!
      try { 
        jsonParser0.parse((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("/");
      // Undeclared exception!
      try { 
        jsonParser0.parse((Reader) stringReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("This is not a JSON Object.");
      stringReader0.close();
      try { 
        jsonParser0.parse((Reader) stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      // Undeclared exception!
      try { 
        jsonParser0.parse((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("X)0xj{4`L$guFg");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonParser0.parse(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("_");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonParser0.parse(jsonReader0);
      // Undeclared exception!
      try { 
        jsonParser0.parse(jsonReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonParser0.parse(jsonReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("\\");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonParser0.parse(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected literal value near \\
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("This is not a JSON Object.");
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)jsonParser0.parse((Reader) stringReader0);
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      try { 
        jsonParser0.parse("{9Y/v7b=dyYTh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected ':' near {9Y/v7b=dyYTh
         //
         verifyException("com.google.gson.Streams", e);
      }
  }
}
