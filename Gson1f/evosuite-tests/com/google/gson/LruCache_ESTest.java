/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:52:13 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.LruCache;
import java.util.AbstractMap;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LruCache_ESTest extends LruCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LruCache<Object, String> lruCache0 = new LruCache<Object, String>(556);
      LruCache<Object, Object> lruCache1 = new LruCache<Object, Object>(1);
      lruCache1.addElement(lruCache0, lruCache0);
      assertFalse(lruCache1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LruCache<String, String> lruCache0 = new LruCache<String, String>(1376);
      lruCache0.put("", "W@cR(KEwc][OPhMCa@");
      int int0 = lruCache0.size();
      assertFalse(lruCache0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LruCache<String, Object> lruCache0 = new LruCache<String, Object>(4242);
      Function<String, String> function0 = Function.identity();
      lruCache0.computeIfAbsent("", function0);
      Object object0 = lruCache0.removeElement("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LruCache<Object, Object> lruCache0 = new LruCache<Object, Object>(3347);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(lruCache0, (Object) null);
      boolean boolean0 = lruCache0.removeEldestEntry(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LruCache<Integer, Object> lruCache0 = new LruCache<Integer, Object>(1858);
      Integer integer0 = new Integer(0);
      lruCache0.putIfAbsent(integer0, integer0);
      lruCache0.getElement(integer0);
      assertFalse(lruCache0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LruCache<Object, Object> lruCache0 = new LruCache<Object, Object>(1751);
      LruCache<Object, String> lruCache1 = new LruCache<Object, String>(0);
      lruCache0.put("_NF3!_8%8iiBfB3", lruCache1);
      // Undeclared exception!
      try { 
        lruCache1.addElement(lruCache0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LruCache<Object, Object> lruCache0 = null;
      try {
        lruCache0 = new LruCache<Object, Object>((-993));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -993
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LruCache<Object, String> lruCache0 = new LruCache<Object, String>(0);
      int int0 = lruCache0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LruCache<String, String> lruCache0 = new LruCache<String, String>(1691);
      String string0 = lruCache0.getElement(")");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LruCache<Object, String> lruCache0 = new LruCache<Object, String>(0);
      lruCache0.clear();
      assertTrue(lruCache0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LruCache<Object, String> lruCache0 = new LruCache<Object, String>(0);
      String string0 = lruCache0.removeElement(")");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LruCache<Object, Object> lruCache0 = new LruCache<Object, Object>(1751);
      LruCache<Object, String> lruCache1 = new LruCache<Object, String>(0);
      lruCache1.addElement(lruCache0, "");
      assertTrue(lruCache1.isEmpty());
  }
}
