/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:37:18 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonDeserializerExceptionWrapper;
import com.google.gson.JsonNull;
import com.google.gson.JsonPrimitive;
import com.google.gson.NullExclusionStrategy;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonDeserializerExceptionWrapper_ESTest extends JsonDeserializerExceptionWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NullExclusionStrategy nullExclusionStrategy0 = new NullExclusionStrategy();
      JsonDeserializer<NullExclusionStrategy> jsonDeserializer0 = (JsonDeserializer<NullExclusionStrategy>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(nullExclusionStrategy0).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      JsonDeserializerExceptionWrapper<NullExclusionStrategy> jsonDeserializerExceptionWrapper0 = new JsonDeserializerExceptionWrapper<NullExclusionStrategy>(jsonDeserializer0);
      Byte byte0 = new Byte((byte) (-2));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      Object object0 = jsonDeserializerExceptionWrapper0.deserialize(jsonPrimitive0, (Type) null, (JsonDeserializationContext) null);
      assertSame(nullExclusionStrategy0, object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonNull jsonNull0 = new JsonNull();
      Class<Integer> class0 = Integer.TYPE;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.google.gson.JsonElement.class) , any(java.lang.reflect.Type.class) , any(com.google.gson.JsonDeserializationContext.class));
      JsonDeserializerExceptionWrapper<Integer> jsonDeserializerExceptionWrapper0 = new JsonDeserializerExceptionWrapper<Integer>(jsonDeserializer0);
      Integer integer0 = jsonDeserializerExceptionWrapper0.deserialize(jsonNull0, class0, (JsonDeserializationContext) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializerExceptionWrapper<Integer> jsonDeserializerExceptionWrapper0 = new JsonDeserializerExceptionWrapper<Integer>(jsonDeserializer0);
      String string0 = jsonDeserializerExceptionWrapper0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonDeserializerExceptionWrapper<Object> jsonDeserializerExceptionWrapper0 = null;
      try {
        jsonDeserializerExceptionWrapper0 = new JsonDeserializerExceptionWrapper<Object>((JsonDeserializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }
}
