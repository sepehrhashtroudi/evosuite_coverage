/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:31:26 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Primitives;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Primitives_ESTest extends Primitives_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = Primitives.unwrap(class0);
      assertEquals("class java.lang.String", class1.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Primitives.wrap((Class<Float>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Primitives.unwrap((Class<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Primitives.isWrapperType((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Short> class1 = Primitives.unwrap(class0);
      Class<Short> class2 = Primitives.unwrap(class1);
      assertNotNull(class2);
      assertEquals("short", class2.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Short> class1 = Primitives.unwrap(class0);
      Class<Short> class2 = Primitives.wrap(class1);
      Class<Short> class3 = Primitives.wrap(class2);
      assertNotSame(class3, class1);
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Short> class1 = Primitives.unwrap(class0);
      Class<Short> class2 = Primitives.wrap(class1);
      boolean boolean0 = Primitives.isWrapperType(class2);
      assertTrue(boolean0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Short> class1 = Primitives.unwrap(class0);
      boolean boolean0 = Primitives.isWrapperType(class1);
      assertFalse(boolean0);
  }
}
