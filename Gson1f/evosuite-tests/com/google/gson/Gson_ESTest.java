/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:48:15 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultTypeAdapters;
import com.google.gson.ExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.ObjectTypePair;
import com.google.gson.ParameterizedTypeImpl;
import com.google.gson.SyntheticFieldExclusionStrategy;
import com.google.gson.stream.JsonReader;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      StringWriter stringWriter0 = new StringWriter();
      gson0.toJson((Object) "com.google.gson.JsonNull", (Appendable) stringWriter0);
      assertEquals("\"com.google.gson.JsonNull\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "Z5Cf#:!ej/");
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      Locale locale0 = Locale.US;
      Set<Character> set0 = locale0.getExtensionKeys();
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) set0);
      assertEquals(0, jsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('C');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
      assertEquals("\"C\"", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson("", class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("java.lang.Integer@0000000019", class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(short0);
      Class<Long> class0 = Long.TYPE;
      Class<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter> class1 = DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter.class;
      Type type0 = ObjectTypePair.getActualTypeIfMoreSpecific(class0, class1);
      Object object0 = gson0.fromJson((JsonElement) jsonPrimitive0, type0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) defaultTypeAdapters_MapTypeAdapter0, (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultTypeAdapters.DefaultDateTypeAdapter> class0 = DefaultTypeAdapters.DefaultDateTypeAdapter.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultTimestampDeserializer defaultTypeAdapters_DefaultTimestampDeserializer0 = new DefaultTypeAdapters.DefaultTimestampDeserializer();
      Class<Double> class0 = Double.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(class0, (Type[]) null, class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) defaultTypeAdapters_DefaultTimestampDeserializer0, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.DefaultTypeAdapters$DefaultTimestampDeserializer cannot be cast to java.lang.Double
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DoubleSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        gson0.toJson(object0, (Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) charArrayWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // circular reference error
         //   Offending field: lock
         // 
         //   Offending object: preserveType: false, type: class java.lang.Object, obj: 
         //
         verifyException("com.google.gson.CircularReferenceException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson("7_t2d$=~Vv.0j", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The JsonDeserializer LongDeserializer failed to deserialized json object \"java.lang.String@0000000016\" given the type long
         //
         verifyException("com.google.gson.JsonDeserializerExceptionWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.LongSerializationPolicy$StringStrategy", (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      Class<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter> class1 = DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter.class;
      Type type0 = ObjectTypePair.getActualTypeIfMoreSpecific(class0, class1);
      try { 
        gson0.fromJson("/uG[)oTtSksJC1s`d", type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected literal value near /uG[)oTtSksJC1s`d
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<ExclusionStrategy> class0 = ExclusionStrategy.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("!|I", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No-args constructor for interface com.google.gson.ExclusionStrategy does not exist. Register an InstanceCreator with Gson for this type to fix this problem.
         //
         verifyException("com.google.gson.MappedObjectConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson(",deserializers:", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected literal value near ,deserializers:
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<DefaultTypeAdapters.FloatSerializer> class0 = DefaultTypeAdapters.FloatSerializer.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultTypeAdapters.DefaultTimestampDeserializer> class0 = DefaultTypeAdapters.DefaultTimestampDeserializer.class;
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The JsonDeserializer ShortTypeAdapter failed to deserialized json object {} given the type short
         //
         verifyException("com.google.gson.JsonDeserializerExceptionWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.createJsonNull();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<DefaultTypeAdapters.DefaultTimestampDeserializer> class1 = DefaultTypeAdapters.DefaultTimestampDeserializer.class;
      Type type0 = ObjectTypePair.getActualTypeIfMoreSpecific(class0, class1);
      DefaultTypeAdapters.DefaultTimestampDeserializer defaultTypeAdapters_DefaultTimestampDeserializer0 = gson0.fromJson((JsonElement) jsonNull0, type0);
      assertNull(defaultTypeAdapters_DefaultTimestampDeserializer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("l7;q", (Type) class0);
      assertEquals("l7", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      gson0.toJson(jsonElement0, (Appendable) null);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) ",instanceCreators:", (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("com.google.gson.DefaultTypeAdapters$LongSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      SyntheticFieldExclusionStrategy syntheticFieldExclusionStrategy0 = Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY;
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) syntheticFieldExclusionStrategy0, (Type) class0, (Appendable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.SyntheticFieldExclusionStrategy cannot be cast to java.lang.Float
         //
         verifyException("com.google.gson.DefaultTypeAdapters$FloatSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      String string0 = gson0.fromJson((JsonElement) null, (Type) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.FloatSerializer defaultTypeAdapters_FloatSerializer0 = gson0.fromJson((String) null, (Type) null);
      assertNull(defaultTypeAdapters_FloatSerializer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) null, (Appendable) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter();
      String string0 = gson0.toJson((Object) defaultTypeAdapters_DefaultDateTypeAdapter0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      Class<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter> class1 = DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter.class;
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = gson0.fromJson(jsonElement0, class1);
      assertNull(defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultTypeAdapters.DefaultTimeTypeAdapter> class0 = DefaultTypeAdapters.DefaultTimeTypeAdapter.class;
      try { 
        gson0.fromJson("Ep", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting object found: \"java.lang.String@0000000021\"
         //
         verifyException("com.google.gson.JsonObjectDeserializationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      StringReader stringReader0 = new StringReader(string0);
      Class<DefaultTypeAdapters.DefaultTimestampDeserializer> class0 = DefaultTypeAdapters.DefaultTimestampDeserializer.class;
      DefaultTypeAdapters.DefaultTimestampDeserializer defaultTypeAdapters_DefaultTimestampDeserializer0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(defaultTypeAdapters_DefaultTimestampDeserializer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) null);
      String string0 = gson0.toJson(jsonElement0);
      assertEquals("", string0);
  }
}
