/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:58:06 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Escaper;
import java.nio.CharBuffer;
import java.nio.InvalidMarkException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Escaper_ESTest extends Escaper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u008B';
      charArray0[1] = 'j';
      charArray0[2] = '6';
      charArray0[3] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      escaper0.escapeJsonString(charBuffer0);
      escaper0.escapeJsonString("\u008Bj6");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      int int0 = 2215;
      CharBuffer charBuffer0 = CharBuffer.allocate(2215);
      String string0 = escaper0.escapeJsonString(charBuffer0);
      // Undeclared exception!
      escaper0.escapeJsonString(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'K';
      charArray0[2] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      escaper0.escapeJsonString(charBuffer0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer1, 288, 288);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      String string0 = escaper0.escapeJsonString(charBuffer0);
      String string1 = escaper0.escapeJsonString("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        escaper0.escapeJsonString((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Escaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = '6';
      charArray0[3] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      escaper0.escapeJsonString(charBuffer0);
      String string0 = escaper0.escapeJsonString("j6j");
      assertEquals("\\u007fj6j", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'u';
      charArray0[2] = '?';
      int int0 = 100;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (int) '?', 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(540);
      escaper0.escapeJsonString(charBuffer0);
      // Undeclared exception!
      try { 
        charBuffer0.reset();
        fail("Expecting exception: InvalidMarkException");
      
      } catch(InvalidMarkException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = 'W';
      charArray0[2] = 'D';
      charArray0[3] = 'm';
      charArray0[4] = 'l';
      charArray0[5] = '&';
      charArray0[6] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      escaper0.escapeJsonString(charBuffer0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "PWDml&P", (-586), 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = ']';
      charArray0[2] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      escaper0.escapeJsonString(charBuffer0);
      // Undeclared exception!
      try { 
        charBuffer0.subSequence((-790), (-790));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(829);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      escaper0.escapeJsonString(charBuffer1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = '<';
      charArray0[2] = 'H';
      charArray0[3] = 'I';
      charArray0[4] = 'C';
      charArray0[5] = '0';
      charArray0[6] = 'J';
      charArray0[7] = 'b';
      charArray0[8] = '<';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 54, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 'G';
      charArray0[2] = 'Z';
      charArray0[3] = '';
      charArray0[4] = 'I';
      charArray0[5] = '9';
      charArray0[6] = '\"';
      charArray0[7] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      escaper0.escapeJsonString(charBuffer0);
      String string0 = escaper0.escapeJsonString("HGZI9\"X");
      assertEquals("HGZ\\u007fI9\\\"X", string0);
  }
}
