/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:42:07 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.AnonymousAndLocalClassExclusionStrategy;
import com.google.gson.CamelCaseSeparatorNamingPolicy;
import com.google.gson.DefaultTypeAdapters;
import com.google.gson.DisjunctionExclusionStrategy;
import com.google.gson.ExclusionStrategy;
import com.google.gson.ExposeAnnotationDeserializationExclusionStrategy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.FieldNamingStrategy2Adapter;
import com.google.gson.GenericArrayTypeImpl;
import com.google.gson.InstanceCreator;
import com.google.gson.JavaFieldNamingPolicy;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializationContextDefault;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializationContextDefault;
import com.google.gson.JsonSerializer;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.LowerCamelCaseSeparatorNamingPolicy;
import com.google.gson.MappedObjectConstructor;
import com.google.gson.ModifierBasedExclusionStrategy;
import com.google.gson.ModifyFirstLetterNamingPolicy;
import com.google.gson.NullExclusionStrategy;
import com.google.gson.ObjectNavigatorFactory;
import com.google.gson.ParameterizedTypeHandlerMap;
import com.google.gson.ParameterizedTypeImpl;
import com.google.gson.VersionExclusionStrategy;
import java.lang.reflect.Type;
import java.net.URL;
import java.sql.Date;
import java.sql.Time;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultTypeAdapters_ESTest extends DefaultTypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      Class<Long> class0 = Long.TYPE;
      AnonymousAndLocalClassExclusionStrategy anonymousAndLocalClassExclusionStrategy0 = new AnonymousAndLocalClassExclusionStrategy();
      JavaFieldNamingPolicy javaFieldNamingPolicy0 = new JavaFieldNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(anonymousAndLocalClassExclusionStrategy0, javaFieldNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, true, parameterizedTypeHandlerMap0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultTimeTypeAdapter0.serialize((Time) null, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      VersionExclusionStrategy versionExclusionStrategy0 = new VersionExclusionStrategy(0.0);
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("null");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(versionExclusionStrategy0, camelCaseSeparatorNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.serialize((Date) null, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers(true, longSerializationPolicy0);
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter("");
      Class<Float> class0 = Float.TYPE;
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault((ObjectNavigatorFactory) null, true, parameterizedTypeHandlerMap0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultDateTypeAdapter0.serialize((java.util.Date) null, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter(0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      DefaultTypeAdapters.DoubleSerializer defaultTypeAdapters_DoubleSerializer0 = new DefaultTypeAdapters.DoubleSerializer(false);
      Double double0 = new Double((-2.145));
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      LinkedHashSet<ExclusionStrategy> linkedHashSet0 = new LinkedHashSet<ExclusionStrategy>(linkedList0);
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedHashSet0);
      JavaFieldNamingPolicy javaFieldNamingPolicy0 = new JavaFieldNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(disjunctionExclusionStrategy0, javaFieldNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      JsonElement jsonElement0 = defaultTypeAdapters_DoubleSerializer0.serialize(double0, (Type) null, (JsonSerializationContext) jsonSerializationContextDefault0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      DefaultTypeAdapters.DoubleSerializer defaultTypeAdapters_DoubleSerializer0 = new DefaultTypeAdapters.DoubleSerializer(true);
      Double double0 = new Double(0.0);
      JsonElement jsonElement0 = defaultTypeAdapters_DoubleSerializer0.serialize(double0, (Type) class0, (JsonSerializationContext) null);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      DefaultTypeAdapters.FloatSerializer defaultTypeAdapters_FloatSerializer0 = new DefaultTypeAdapters.FloatSerializer(true);
      Float float0 = new Float((double) 0L);
      JsonElement jsonElement0 = defaultTypeAdapters_FloatSerializer0.serialize(float0, (Type) class0, (JsonSerializationContext) null);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      Class<Double> class0 = Double.TYPE;
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put("2Rd|pLVw-G\"Q", (URL) null);
      JsonElement jsonElement0 = defaultTypeAdapters_MapTypeAdapter0.serialize((Map) hashMap0, (Type) class0, (JsonSerializationContext) null);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      JsonObject jsonObject0 = new JsonObject();
      Class<Long> class0 = Long.TYPE;
      try { 
        defaultTypeAdapters_DefaultTimeTypeAdapter0.deserialize(jsonObject0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultTypeAdapters.FloatSerializer defaultTypeAdapters_FloatSerializer0 = new DefaultTypeAdapters.FloatSerializer(false);
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultDeserializers();
      Float float0 = new Float(0.0);
      Class<Float> class0 = Float.TYPE;
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList0);
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy(":z&uJ-?J");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(disjunctionExclusionStrategy0, camelCaseSeparatorNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, true, parameterizedTypeHandlerMap0);
      JsonElement jsonElement0 = defaultTypeAdapters_FloatSerializer0.serialize(float0, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap1, (MappedObjectConstructor) null);
      try { 
        defaultTypeAdapters_DefaultTimeTypeAdapter0.deserialize(jsonElement0, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"java.lang.Float@0000000035\"
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      JsonNull jsonNull0 = new JsonNull();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.deserialize(jsonNull0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterizedTypeHandlerMap<InstanceCreator<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultInstanceCreators();
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultDeserializers();
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      Double double0 = new Double(2945.368);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
      Class<Short> class0 = Short.TYPE;
      NullExclusionStrategy nullExclusionStrategy0 = new NullExclusionStrategy();
      LowerCamelCaseSeparatorNamingPolicy lowerCamelCaseSeparatorNamingPolicy0 = new LowerCamelCaseSeparatorNamingPolicy(". ");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(nullExclusionStrategy0, lowerCamelCaseSeparatorNamingPolicy0);
      MappedObjectConstructor mappedObjectConstructor0 = new MappedObjectConstructor(parameterizedTypeHandlerMap0);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap1, mappedObjectConstructor0);
      try { 
        defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.deserialize(jsonPrimitive0, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"java.lang.Double@0000000034\"
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter(":.&");
      JsonArray jsonArray0 = new JsonArray();
      try { 
        defaultTypeAdapters_DefaultDateTypeAdapter0.deserialize(jsonArray0, (Type) null, (JsonDeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter("");
      Character character0 = Character.valueOf('/');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      try { 
        defaultTypeAdapters_DefaultDateTypeAdapter0.deserialize(jsonPrimitive0, (Type) null, (JsonDeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"/\"
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers(true, longSerializationPolicy0);
      VersionExclusionStrategy versionExclusionStrategy0 = new VersionExclusionStrategy(0.0);
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("C%e:%CG-mXNAGB5(I~");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(versionExclusionStrategy0, camelCaseSeparatorNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, true, parameterizedTypeHandlerMap0);
      DefaultTypeAdapters.FloatSerializer defaultTypeAdapters_FloatSerializer0 = new DefaultTypeAdapters.FloatSerializer(true);
      JsonElement jsonElement0 = jsonSerializationContextDefault0.serialize((Object) defaultTypeAdapters_FloatSerializer0);
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter(0);
      Class<Long> class0 = Long.TYPE;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      MockDate mockDate0 = new MockDate((-1L));
      ExposeAnnotationDeserializationExclusionStrategy exposeAnnotationDeserializationExclusionStrategy0 = new ExposeAnnotationDeserializationExclusionStrategy();
      JavaFieldNamingPolicy javaFieldNamingPolicy0 = new JavaFieldNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(exposeAnnotationDeserializationExclusionStrategy0, javaFieldNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)defaultTypeAdapters_DefaultDateTypeAdapter0.serialize((java.util.Date) mockDate0, (Type) genericArrayTypeImpl0, (JsonSerializationContext) jsonSerializationContextDefault0);
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter(0);
      String string0 = defaultTypeAdapters_DefaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      VersionExclusionStrategy versionExclusionStrategy0 = new VersionExclusionStrategy(0.08005057618571147);
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("null");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(versionExclusionStrategy0, camelCaseSeparatorNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Type[] typeArray0 = new Type[5];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_MapTypeAdapter0.serialize((Map) hashMap0, (Type) parameterizedTypeImpl0, (JsonSerializationContext) jsonSerializationContextDefault0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultTypeAdapters defaultTypeAdapters0 = new DefaultTypeAdapters();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultDeserializers();
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      ParameterizedTypeHandlerMap<InstanceCreator<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultInstanceCreators();
      Time time0 = new Time(2209L);
      Class<Short> class0 = Short.TYPE;
      JsonElement jsonElement0 = defaultTypeAdapters_DefaultTimeTypeAdapter0.serialize(time0, (Type) class0, (JsonSerializationContext) null);
      MappedObjectConstructor mappedObjectConstructor0 = new MappedObjectConstructor(parameterizedTypeHandlerMap1);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault((ObjectNavigatorFactory) null, parameterizedTypeHandlerMap0, mappedObjectConstructor0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_MapTypeAdapter0.deserialize(jsonElement0, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No-args constructor for short does not exist. Register an InstanceCreator with Gson for this type to fix this problem.
         //
         verifyException("com.google.gson.MappedObjectConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      String string0 = defaultTypeAdapters_MapTypeAdapter0.toString();
      assertEquals("MapTypeAdapter", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      Map map0 = defaultTypeAdapters_MapTypeAdapter0.createInstance((Type) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers(false, longSerializationPolicy0);
      HashMap<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter, Locale> hashMap0 = new HashMap<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter, Locale>();
      Class<Double> class0 = Double.TYPE;
      int[] intArray0 = new int[2];
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      Locale locale0 = Locale.ITALIAN;
      hashMap0.put(defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0, locale0);
      ModifierBasedExclusionStrategy modifierBasedExclusionStrategy0 = new ModifierBasedExclusionStrategy(intArray0);
      FieldNamingStrategy fieldNamingStrategy0 = mock(FieldNamingStrategy.class, new ViolatedAssumptionAnswer());
      FieldNamingStrategy2Adapter fieldNamingStrategy2Adapter0 = new FieldNamingStrategy2Adapter(fieldNamingStrategy0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(modifierBasedExclusionStrategy0, fieldNamingStrategy2Adapter0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      JsonElement jsonElement0 = defaultTypeAdapters_MapTypeAdapter0.serialize((Map) hashMap0, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      Date date0 = new Date(1171L);
      Class<Double> class0 = Double.TYPE;
      JsonElement jsonElement0 = defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.serialize(date0, (Type) class0, (JsonSerializationContext) null);
      assertTrue(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultDeserializers();
      ParameterizedTypeHandlerMap<InstanceCreator<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultInstanceCreators();
      DefaultTypeAdapters.DefaultTimestampDeserializer defaultTypeAdapters_DefaultTimestampDeserializer0 = new DefaultTypeAdapters.DefaultTimestampDeserializer();
      JsonNull jsonNull0 = new JsonNull();
      Class<Short> class0 = Short.TYPE;
      NullExclusionStrategy nullExclusionStrategy0 = new NullExclusionStrategy();
      ModifyFirstLetterNamingPolicy.LetterModifier modifyFirstLetterNamingPolicy_LetterModifier0 = ModifyFirstLetterNamingPolicy.LetterModifier.LOWER;
      ModifyFirstLetterNamingPolicy modifyFirstLetterNamingPolicy0 = new ModifyFirstLetterNamingPolicy(modifyFirstLetterNamingPolicy_LetterModifier0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(nullExclusionStrategy0, modifyFirstLetterNamingPolicy0);
      MappedObjectConstructor mappedObjectConstructor0 = new MappedObjectConstructor(parameterizedTypeHandlerMap1);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap0, mappedObjectConstructor0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultTimestampDeserializer0.deserialize(jsonNull0, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultTimestampDeserializer", e);
      }
  }
}
