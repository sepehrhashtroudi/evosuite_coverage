/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 03 21:20:01 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.AnonymousAndLocalClassExclusionStrategy;
import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldNamingStrategy2;
import com.google.gson.ModifierBasedExclusionStrategy;
import com.google.gson.ModifyFirstLetterNamingPolicy;
import com.google.gson.ObjectNavigator;
import com.google.gson.ObjectNavigatorFactory;
import com.google.gson.ObjectTypePair;
import com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy;
import com.google.gson.UpperCaseNamingPolicy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectNavigatorFactory_ESTest extends ObjectNavigatorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[9];
      ModifierBasedExclusionStrategy modifierBasedExclusionStrategy0 = new ModifierBasedExclusionStrategy(intArray0);
      ObjectNavigatorFactory objectNavigatorFactory0 = null;
      try {
        objectNavigatorFactory0 = new ObjectNavigatorFactory(modifierBasedExclusionStrategy0, (FieldNamingStrategy2) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ModifyFirstLetterNamingPolicy.LetterModifier modifyFirstLetterNamingPolicy_LetterModifier0 = ModifyFirstLetterNamingPolicy.LetterModifier.LOWER;
      ModifyFirstLetterNamingPolicy modifyFirstLetterNamingPolicy0 = new ModifyFirstLetterNamingPolicy(modifyFirstLetterNamingPolicy_LetterModifier0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory((ExclusionStrategy) null, modifyFirstLetterNamingPolicy0);
      FieldNamingStrategy2 fieldNamingStrategy2_0 = objectNavigatorFactory0.getFieldNamingPolicy();
      assertSame(fieldNamingStrategy2_0, modifyFirstLetterNamingPolicy0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AnonymousAndLocalClassExclusionStrategy anonymousAndLocalClassExclusionStrategy0 = new AnonymousAndLocalClassExclusionStrategy();
      UpperCaseNamingPolicy upperCaseNamingPolicy0 = new UpperCaseNamingPolicy();
      SerializedNameAnnotationInterceptingNamingPolicy serializedNameAnnotationInterceptingNamingPolicy0 = new SerializedNameAnnotationInterceptingNamingPolicy(upperCaseNamingPolicy0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(anonymousAndLocalClassExclusionStrategy0, serializedNameAnnotationInterceptingNamingPolicy0);
      ObjectNavigator objectNavigator0 = objectNavigatorFactory0.create((ObjectTypePair) null);
      assertNotNull(objectNavigator0);
  }
}
