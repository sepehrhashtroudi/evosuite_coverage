/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:50:13 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.GenericArrayTypeImpl;
import com.google.gson.ObjectTypePair;
import com.google.gson.Pair;
import com.google.gson.ParameterizedTypeHandlerMap;
import com.google.gson.ParameterizedTypeImpl;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectTypePair_ESTest extends ObjectTypePair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(type0).toString();
      Class<Object> class0 = Object.class;
      Type type1 = ObjectTypePair.getActualTypeIfMoreSpecific(type0, class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(type1, typeArray0[0], false);
      ParameterizedTypeHandlerMap<Integer> parameterizedTypeHandlerMap0 = new ParameterizedTypeHandlerMap<Integer>();
      Integer integer0 = new Integer((-1));
      parameterizedTypeHandlerMap0.registerForTypeHierarchy((Class<?>) class0, integer0);
      objectTypePair0.getMatchingHandler(parameterizedTypeHandlerMap0);
      assertFalse(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      ObjectTypePair objectTypePair1 = new ObjectTypePair(objectTypePair0, class0, false);
      ParameterizedTypeHandlerMap<Integer> parameterizedTypeHandlerMap0 = new ParameterizedTypeHandlerMap<Integer>();
      Pair<Integer, ObjectTypePair> pair0 = objectTypePair1.getMatchingHandler(parameterizedTypeHandlerMap0);
      assertFalse(objectTypePair1.isPreserveType());
      assertNull(pair0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, (Type) null, false);
      boolean boolean0 = objectTypePair0.equals(objectTypePair0);
      assertTrue(boolean0);
      assertFalse(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      ObjectTypePair objectTypePair1 = new ObjectTypePair(objectTypePair0, class0, false);
      boolean boolean0 = objectTypePair1.isPreserveType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ObjectTypePair objectTypePair0 = new ObjectTypePair(integer0, (Type) null, true);
      objectTypePair0.getType();
      assertTrue(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(genericArrayTypeImpl0, typeArray0, typeArray0[0]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair(object0, parameterizedTypeImpl0, false);
      // Undeclared exception!
      try { 
        objectTypePair0.getMatchingHandler((ParameterizedTypeHandlerMap<ObjectTypePair>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.ObjectTypePair", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, (Type) null, false);
      objectTypePair0.setObject(objectTypePair0);
      ObjectTypePair objectTypePair1 = new ObjectTypePair(objectTypePair0, (Type) null, true);
      boolean boolean0 = objectTypePair0.equals(objectTypePair1);
      assertTrue(objectTypePair1.isPreserveType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[0]);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(parameterizedTypeImpl0);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, genericArrayTypeImpl0, true);
      Object object0 = new Object();
      ObjectTypePair objectTypePair1 = new ObjectTypePair(object0, (Type) null, true);
      objectTypePair1.setObject(typeArray0[0]);
      boolean boolean0 = objectTypePair0.equals(objectTypePair1);
      assertFalse(boolean0);
      assertTrue(objectTypePair1.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.gson.ParameterizedTypeHandlerMap").when(type0).toString();
      Class<Integer> class0 = Integer.class;
      Type type1 = ObjectTypePair.getActualTypeIfMoreSpecific(type0, class0);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type1);
      Object object0 = new Object();
      ObjectTypePair objectTypePair0 = new ObjectTypePair(object0, genericArrayTypeImpl0, true);
      objectTypePair0.setObject(class0);
      ObjectTypePair objectTypePair1 = new ObjectTypePair(object0, type1, false);
      boolean boolean0 = objectTypePair0.equals(objectTypePair1);
      assertFalse(objectTypePair1.isPreserveType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, (Type) null, true);
      ObjectTypePair objectTypePair1 = new ObjectTypePair(objectTypePair0, (Type) null, true);
      boolean boolean0 = objectTypePair0.equals(objectTypePair1);
      assertTrue(objectTypePair1.isPreserveType());
      assertFalse(boolean0);
      assertFalse(objectTypePair1.equals((Object)objectTypePair0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, (Type) null, true);
      ObjectTypePair objectTypePair1 = new ObjectTypePair((Object) null, (Type) null, true);
      boolean boolean0 = objectTypePair0.equals(objectTypePair1);
      assertTrue(objectTypePair1.isPreserveType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      boolean boolean0 = objectTypePair0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<ObjectTypePair> class0 = ObjectTypePair.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair("FB^dn~% ", class0, false);
      Integer integer0 = new Integer(31);
      boolean boolean0 = objectTypePair0.equals(integer0);
      assertFalse(boolean0);
      assertFalse(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(type0, typeArray0, type0);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(parameterizedTypeImpl0);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, genericArrayTypeImpl0, false);
      objectTypePair0.hashCode();
      assertFalse(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, (Type) null, true);
      objectTypePair0.setObject(class0);
      objectTypePair0.hashCode();
      assertTrue(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = (Class)ObjectTypePair.getActualTypeIfMoreSpecific(class0, class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<ObjectTypePair> class0 = ObjectTypePair.class;
      ParameterizedTypeHandlerMap<Object> parameterizedTypeHandlerMap0 = new ParameterizedTypeHandlerMap<Object>();
      ObjectTypePair objectTypePair0 = new ObjectTypePair("FB^dn~% ", class0, false);
      Pair<Object, ObjectTypePair> pair0 = objectTypePair0.getMatchingHandler(parameterizedTypeHandlerMap0);
      assertFalse(objectTypePair0.isPreserveType());
      assertNull(pair0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, (Type) null, false);
      ObjectTypePair objectTypePair1 = objectTypePair0.toMoreSpecificType();
      assertFalse(objectTypePair1.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      ObjectTypePair objectTypePair0 = new ObjectTypePair(object0, (Type) null, true);
      ObjectTypePair objectTypePair1 = objectTypePair0.toMoreSpecificType();
      assertTrue(objectTypePair1.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair("joreb", (Type) null, false);
      ParameterizedTypeHandlerMap<ObjectTypePair> parameterizedTypeHandlerMap0 = new ParameterizedTypeHandlerMap<ObjectTypePair>();
      objectTypePair0.setObject((Object) null);
      parameterizedTypeHandlerMap0.registerIfAbsent((Type) null, objectTypePair0);
      Pair<ObjectTypePair, ObjectTypePair> pair0 = objectTypePair0.getMatchingHandler(parameterizedTypeHandlerMap0);
      assertFalse(objectTypePair0.isPreserveType());
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair("joreb", (Type) null, false);
      ParameterizedTypeHandlerMap<ObjectTypePair> parameterizedTypeHandlerMap0 = new ParameterizedTypeHandlerMap<ObjectTypePair>();
      objectTypePair0.setObject((Object) null);
      // Undeclared exception!
      try { 
        objectTypePair0.getMatchingHandler(parameterizedTypeHandlerMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, (Type) null, true);
      ParameterizedTypeHandlerMap<Integer> parameterizedTypeHandlerMap0 = new ParameterizedTypeHandlerMap<Integer>();
      // Undeclared exception!
      try { 
        objectTypePair0.getMatchingHandler(parameterizedTypeHandlerMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      objectTypePair0.toString();
      assertTrue(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      objectTypePair0.setObject("com.google.gson.ParameterizedTypeImpl@ea52c720");
      objectTypePair0.getObject();
      assertTrue(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      boolean boolean0 = objectTypePair0.isPreserveType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      objectTypePair0.getObject();
      assertTrue(objectTypePair0.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, typeArray0[2]);
      ObjectTypePair objectTypePair0 = new ObjectTypePair((Object) null, parameterizedTypeImpl0, true);
      Type type0 = objectTypePair0.getType();
      assertNotNull(type0);
      assertTrue(objectTypePair0.isPreserveType());
  }
}
