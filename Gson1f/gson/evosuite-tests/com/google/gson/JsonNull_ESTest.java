/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:48:14 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Escaper;
import com.google.gson.JsonNull;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonNull_ESTest extends JsonNull_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonNull jsonNull0 = new JsonNull();
      MockFileWriter mockFileWriter0 = new MockFileWriter("*D?`A)dHI", false);
      Escaper escaper0 = new Escaper(false);
      jsonNull0.toString((Appendable) mockFileWriter0, escaper0);
      assertFalse(jsonNull0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.createJsonNull();
      String string0 = jsonNull0.toString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.createJsonNull();
      Object object0 = new Object();
      boolean boolean0 = jsonNull0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonNull jsonNull0 = new JsonNull();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "null");
      Escaper escaper0 = new Escaper(true);
      // Undeclared exception!
      try { 
        jsonNull0.toString((Appendable) charBuffer0, escaper0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.createJsonNull();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Escaper escaper0 = new Escaper(false);
      // Undeclared exception!
      try { 
        jsonNull0.toString((Appendable) charBuffer0, escaper0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.createJsonNull();
      Escaper escaper0 = new Escaper(true);
      // Undeclared exception!
      try { 
        jsonNull0.toString((Appendable) null, escaper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonNull", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JsonNull jsonNull0 = new JsonNull();
      jsonNull0.hashCode();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JsonNull jsonNull0 = new JsonNull();
      boolean boolean0 = jsonNull0.equals(jsonNull0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JsonNull jsonNull0 = new JsonNull();
      PipedWriter pipedWriter0 = new PipedWriter();
      Escaper escaper0 = new Escaper(false);
      try { 
        jsonNull0.toString((Appendable) pipedWriter0, escaper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
}
