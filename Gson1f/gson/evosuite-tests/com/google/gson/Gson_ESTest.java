/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:52:32 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultTypeAdapters;
import com.google.gson.GenericArrayTypeImpl;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.ModifierBasedExclusionStrategy;
import com.google.gson.ObjectTypePair;
import com.google.gson.ParameterizedTypeImpl;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(true);
      gson0.toJson((JsonElement) null, jsonWriter0);
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(660);
      gson0.toJson((Object) null, (Type) class0, (Appendable) charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      Integer integer0 = new Integer(0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) integer0);
      String string0 = gson0.toJson(jsonElement0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson((String) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("JF8>^o-STSx-<~NpN$", class0);
      assertEquals("JF8>^o-STSx-<~NpN$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      Class<Character> class0 = Character.TYPE;
      Type type0 = ObjectTypePair.getActualTypeIfMoreSpecific(class0, class0);
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = gson0.fromJson((Reader) stringReader0, type0);
      assertNull(defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      Class<DefaultTypeAdapters.DefaultDateTypeAdapter> class0 = DefaultTypeAdapters.DefaultDateTypeAdapter.class;
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(defaultTypeAdapters_DefaultDateTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter> class0 = DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter.class;
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = gson0.fromJson((JsonElement) null, class0);
      assertNull(defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter("");
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) defaultTypeAdapters_DefaultDateTypeAdapter0, (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        gson0.toJsonTree(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "X.[(leU]bNu9^JT5", (Type) class0, (JsonWriter) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Byte
         //
         verifyException("com.google.gson.DefaultTypeAdapters$ByteTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(class0);
      DefaultTypeAdapters.DoubleSerializer defaultTypeAdapters_DoubleSerializer0 = new DefaultTypeAdapters.DoubleSerializer(false);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) defaultTypeAdapters_DoubleSerializer0, (Type) genericArrayTypeImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      Integer integer0 = new Integer((-393));
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) integer0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Short
         //
         verifyException("com.google.gson.DefaultTypeAdapters$ShortTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        gson0.toJson((Object) stringReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // circular reference error
         //   Offending field: lock
         // 
         //   Offending object: preserveType: false, type: class java.lang.Object, obj: java.io.StringReader@6de9957a
         //
         verifyException("com.google.gson.CircularReferenceException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonObject0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson("jv^oCf!.jm  ", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The JsonDeserializer LongDeserializer failed to deserialized json object \"java.lang.String@0000000016\" given the type long
         //
         verifyException("com.google.gson.JsonDeserializerExceptionWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultTypeAdapters.DefaultDateTypeAdapter> class0 = DefaultTypeAdapters.DefaultDateTypeAdapter.class;
      try { 
        gson0.fromJson("lV_", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting object found: \"java.lang.String@0000000021\"
         //
         verifyException("com.google.gson.JsonObjectDeserializationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("O#<^agdOqS(z'P$e");
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The JsonDeserializer LongDeserializer failed to deserialized json object \"java.lang.String@0000000016\" given the type long
         //
         verifyException("com.google.gson.JsonDeserializerExceptionWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("cx))'8_I*JwCx+D");
      Class<DefaultTypeAdapters.DefaultTimeTypeAdapter> class0 = DefaultTypeAdapters.DefaultTimeTypeAdapter.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting object found: \"java.lang.String@0000000021\"
         //
         verifyException("com.google.gson.JsonObjectDeserializationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("jQB");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Class<Integer> class0 = Integer.TYPE;
      Type[] typeArray0 = new Type[9];
      Class<Double> class1 = Double.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(class0, typeArray0, class1);
      try { 
        gson0.fromJson(jsonReader0, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      JsonNull jsonNull0 = new JsonNull();
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertNull(defaultTypeAdapters_DefaultTimeTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = new JsonNull();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      gson0.toJson((JsonElement) jsonNull0, (Appendable) mockPrintStream0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.FloatSerializer defaultTypeAdapters_FloatSerializer0 = new DefaultTypeAdapters.FloatSerializer(false);
      Class<Character> class0 = Character.TYPE;
      Type type0 = ObjectTypePair.getActualTypeIfMoreSpecific(class0, class0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) defaultTypeAdapters_FloatSerializer0, type0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultTypeAdapters.DefaultDateTypeAdapter> class0 = DefaultTypeAdapters.DefaultDateTypeAdapter.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      PipedReader pipedReader0 = new PipedReader();
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Boolean> class0 = Boolean.TYPE;
      Type[] typeArray0 = new Type[6];
      Class<Byte> class1 = Byte.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(class0, typeArray0, class1);
      gson0.fromJson(jsonReader0, (Type) parameterizedTypeImpl0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      Integer integer0 = gson0.fromJson((JsonElement) null, (Type) class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      DefaultTypeAdapters.DoubleSerializer defaultTypeAdapters_DoubleSerializer0 = gson0.fromJson((String) null, (Type) class0);
      assertNull(defaultTypeAdapters_DoubleSerializer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(331);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) pipedReader0, (Appendable) mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // circular reference error
         //   Offending field: lock
         // 
         //   Offending object: preserveType: false, type: class java.lang.Object, obj: java.io.PipedReader@131b3dff
         //
         verifyException("com.google.gson.CircularReferenceException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      StringWriter stringWriter0 = new StringWriter(0);
      gson0.toJson((Object) null, (Appendable) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      String string0 = gson0.toJson((Object) defaultTypeAdapters_MapTypeAdapter0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('r');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<ModifierBasedExclusionStrategy> class0 = ModifierBasedExclusionStrategy.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting object found: \"java.lang.String@0000000021\"
         //
         verifyException("com.google.gson.JsonObjectDeserializationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      try { 
        gson0.fromJson("}Z", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected literal value near }Z
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter(0, 0);
      Class<Short> class0 = Short.TYPE;
      File file0 = MockFile.createTempFile("[y#61V)Q:x\"z=q", "[y#61V)Q:x\"z=q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) defaultTypeAdapters_DefaultDateTypeAdapter0, (Type) class0, (Appendable) mockPrintStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter cannot be cast to java.lang.Short
         //
         verifyException("com.google.gson.DefaultTypeAdapters$ShortTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<DefaultTypeAdapters.DefaultDateTypeAdapter> class0 = DefaultTypeAdapters.DefaultDateTypeAdapter.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      DefaultTypeAdapters.DoubleSerializer defaultTypeAdapters_DoubleSerializer0 = new DefaultTypeAdapters.DoubleSerializer(false);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) defaultTypeAdapters_DoubleSerializer0, (Type) null, (JsonWriter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type 'null' is not a Class, ParameterizedType, or GenericArrayType. Can't extract class.
         //
         verifyException("com.google.gson.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = new JsonNull();
      String string0 = gson0.toJson((JsonElement) jsonNull0);
      assertEquals("", string0);
  }
}
