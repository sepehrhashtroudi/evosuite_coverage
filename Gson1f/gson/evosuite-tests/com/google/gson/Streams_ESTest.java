/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 10:03:10 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonNull;
import com.google.gson.JsonPrimitive;
import com.google.gson.Streams;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.StringReader;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Streams_ESTest extends Streams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Couldn't write ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        Streams.parse(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected JSON document to start with '[' or '{' near Couldn't write 
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Streams.parse((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4418);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        Streams.parse(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      File file0 = MockFile.createTempFile("!G*FNb0rVk|JA0tgx", "!G*FNb0rVk|JA0tgx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Writer writer0 = Streams.writerForAppendable(mockPrintWriter0);
      assertSame(mockPrintWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.createJsonNull();
      // Undeclared exception!
      try { 
        Streams.write(jsonNull0, true, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Character character0 = new Character('+');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'u+&S,\"");
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        Streams.write(jsonPrimitive0, false, jsonWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must start with an array or an object.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      Streams.parse(jsonReader0);
      // Undeclared exception!
      try { 
        Streams.parse(jsonReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Couldn't write ");
      Writer writer0 = Streams.writerForAppendable(mockPrintStream0);
      assertNotNull(writer0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Streams streams0 = new Streams();
  }
}
