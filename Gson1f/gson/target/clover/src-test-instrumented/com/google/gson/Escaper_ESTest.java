/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 10:01:59 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Escaper;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Escaper_ESTest extends Escaper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      assertNotNull(escaper0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '\u0080';
      charArray0[2] = '-';
      charArray0[3] = 'R';
      charArray0[4] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals("v\u0080-R'", charBuffer0.toString());
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertArrayEquals(new char[] {'v', '\u0080', '-', 'R', '\''}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertNotNull(string0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals("v\u0080-R'", charBuffer0.toString());
      assertEquals(5, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("v\\u0080-R'", string0);
      assertArrayEquals(new char[] {'v', '\u0080', '-', 'R', '\''}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string1 = escaper0.escapeJsonString("v\u0080-R'");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("v\\u0080-R'", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      assertNotNull(escaper0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1285);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1285, charBuffer0.remaining());
      assertEquals(1285, charBuffer0.length());
      assertEquals(1285, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1285, charBuffer0.limit());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '+';
      charArray0[2] = '?';
      charArray0[3] = 'P';
      charArray0[4] = '=';
      charArray0[5] = ' ';
      CharBuffer charBuffer1 = charBuffer0.subSequence(0, 0);
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1285, charBuffer0.remaining());
      assertEquals(1285, charBuffer0.length());
      assertEquals(1285, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1285, charBuffer0.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1285, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      
      charArray0[6] = '0';
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer2);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.hasArray());
      assertEquals(7, charBuffer2.limit());
      assertEquals(7, charBuffer2.length());
      assertEquals(7, charBuffer2.capacity());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals("{+?P= 0", charBuffer2.toString());
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.position());
      assertEquals(7, charBuffer2.remaining());
      assertArrayEquals(new char[] {'{', '+', '?', 'P', '=', ' ', '0'}, charArray0);
      assertEquals(7, charArray0.length);
      
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertNotNull(string0);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1285, charBuffer0.remaining());
      assertEquals(1285, charBuffer0.length());
      assertEquals(1285, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1285, charBuffer0.limit());
      
      CharBuffer charBuffer3 = CharBuffer.allocate(0);
      assertNotNull(charBuffer3);
      assertNotSame(charBuffer3, charBuffer2);
      assertNotSame(charBuffer3, charBuffer0);
      assertNotSame(charBuffer3, charBuffer1);
      assertFalse(charBuffer3.equals((Object)charBuffer2));
      assertTrue(charBuffer3.equals((Object)charBuffer1));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertFalse(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.limit());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.position());
      assertEquals(0, charBuffer3.length());
      assertEquals(0, charBuffer3.capacity());
      assertFalse(charBuffer3.isDirect());
      assertEquals("", charBuffer3.toString());
      assertEquals(0, charBuffer3.arrayOffset());
      assertTrue(charBuffer3.hasArray());
      assertEquals(0, charBuffer3.remaining());
      
      String string1 = escaper0.escapeJsonString(charBuffer3);
      assertNotNull(string1);
      assertNotSame(charBuffer3, charBuffer2);
      assertNotSame(charBuffer3, charBuffer0);
      assertNotSame(charBuffer3, charBuffer1);
      assertFalse(charBuffer3.equals((Object)charBuffer2));
      assertTrue(charBuffer3.equals((Object)charBuffer1));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.limit());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.position());
      assertEquals(0, charBuffer3.length());
      assertEquals(0, charBuffer3.capacity());
      assertFalse(charBuffer3.isDirect());
      assertEquals("", charBuffer3.toString());
      assertEquals(0, charBuffer3.arrayOffset());
      assertTrue(charBuffer3.hasArray());
      assertEquals(0, charBuffer3.remaining());
      assertEquals("", string1);
      
      String string2 = escaper0.escapeJsonString(charBuffer2);
      assertNotNull(string2);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertNotSame(charBuffer2, charBuffer3);
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(charBuffer2.hasArray());
      assertEquals(7, charBuffer2.limit());
      assertEquals(7, charBuffer2.length());
      assertEquals(7, charBuffer2.capacity());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals("{+?P= 0", charBuffer2.toString());
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.position());
      assertEquals(7, charBuffer2.remaining());
      assertEquals("{+?P= 0", string2);
      assertArrayEquals(new char[] {'{', '+', '?', 'P', '=', ' ', '0'}, charArray0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) string0, 53, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      assertNotNull(escaper0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = 'c';
      charArray0[3] = '*';
      charArray0[4] = 'C';
      CharBuffer charBuffer0 = CharBuffer.allocate(1970);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1970, charBuffer0.length());
      assertEquals(1970, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1970, charBuffer0.capacity());
      assertEquals(1970, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertNotNull(string0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1970, charBuffer0.length());
      assertEquals(1970, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1970, charBuffer0.capacity());
      assertEquals(1970, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      escaper0.escapeJsonString(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      assertNotNull(escaper0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = '?';
      charArray0[2] = 'G';
      charArray0[3] = 'g';
      charArray0[4] = 'X';
      charArray0[5] = 'T';
      charArray0[6] = '\"';
      charArray0[7] = '^';
      charArray0[8] = 'C';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("N?GgXT\"^C", charBuffer0.toString());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'N', '?', 'G', 'g', 'X', 'T', '\"', '^', 'C'}, charArray0);
      assertEquals(9, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("N?GgXT\"^C", charBuffer0.toString());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("N?GgXT\"^C", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(9, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertArrayEquals(new char[] {'N', '?', 'G', 'g', 'X', 'T', '\"', '^', 'C'}, charArray0);
      assertEquals(9, charArray0.length);
      
      String string0 = escaper0.escapeJsonString(charBuffer1);
      assertNotNull(string0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("N?GgXT\"^C", charBuffer0.toString());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("N?GgXT\"^C", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(9, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(9, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals("N?GgXT\\\"^C", string0);
      assertArrayEquals(new char[] {'N', '?', 'G', 'g', 'X', 'T', '\"', '^', 'C'}, charArray0);
      assertEquals(9, charArray0.length);
      
      String string1 = escaper0.escapeJsonString("N?GgXT\"^C");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("N?GgXT\\\"^C", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      assertNotNull(escaper0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertNotNull(string0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", string0);
      
      String string1 = escaper0.escapeJsonString("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = escaper0.escapeJsonString("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = escaper0.escapeJsonString("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = escaper0.escapeJsonString("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = escaper0.escapeJsonString("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = escaper0.escapeJsonString("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = escaper0.escapeJsonString("");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      
      String string8 = escaper0.escapeJsonString("");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      
      // Undeclared exception!
      try { 
        escaper0.escapeJsonString((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Escaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      assertNotNull(escaper0);
      
      Escaper escaper1 = new Escaper(true);
      assertNotNull(escaper1);
      assertFalse(escaper1.equals((Object)escaper0));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      
      String string0 = escaper1.escapeJsonString(charBuffer0);
      assertNotNull(string0);
      assertNotSame(escaper1, escaper0);
      assertFalse(escaper1.equals((Object)escaper0));
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("", string0);
      
      String string1 = escaper0.escapeJsonString("");
      assertNotNull(string1);
      assertNotSame(escaper0, escaper1);
      assertFalse(escaper0.equals((Object)escaper1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      assertNotNull(escaper0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '';
      charArray0[2] = '-';
      charArray0[3] = 'R';
      charArray0[4] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals("v-R'", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertArrayEquals(new char[] {'v', '', '-', 'R', '\''}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertNotNull(string0);
      assertEquals("v-R'", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("v\\u007f-R'", string0);
      assertArrayEquals(new char[] {'v', '', '-', 'R', '\''}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      assertNotNull(escaper0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '\u0084';
      charArray0[2] = '-';
      charArray0[4] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.limit());
      assertEquals("v\u0084-\u0000'", charBuffer0.toString());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'v', '\u0084', '-', '\u0000', '\''}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertNotNull(string0);
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.limit());
      assertEquals("v\u0084-\u0000'", charBuffer0.toString());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("v\\u0084-\\u0000'", string0);
      assertArrayEquals(new char[] {'v', '\u0084', '-', '\u0000', '\''}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      assertNotNull(escaper0);
      
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      
      char char0 = 'x';
      // Undeclared exception!
      try { 
        charBuffer0.put('x');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Escaper escaper0 = new Escaper(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(1496);
      escaper0.escapeJsonString(charBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = ':';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 48, 2568);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.allocate(159);
      escaper0.escapeJsonString(charBuffer0);
      escaper0.escapeJsonString("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      charArray0[0] = 'Q';
      char char0 = '[';
      // Undeclared exception!
      try { 
        escaper0.escapeJsonString((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Escaper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[3];
      char char0 = 'D';
      charArray0[0] = 'D';
      char char1 = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        charBuffer0.append('E');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'u';
      charArray0[2] = 'W';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertEquals("\\u0027uW", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Escaper escaper0 = new Escaper(true);
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '{';
      charArray0[2] = ';';
      charArray0[3] = 'C';
      charArray0[4] = 'n';
      charArray0[5] = 'b';
      charArray0[6] = '_';
      charArray0[7] = '-';
      charArray0[8] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = escaper0.escapeJsonString(charBuffer0);
      assertEquals("\\u0027{;Cnb_-Y", string0);
  }
}
