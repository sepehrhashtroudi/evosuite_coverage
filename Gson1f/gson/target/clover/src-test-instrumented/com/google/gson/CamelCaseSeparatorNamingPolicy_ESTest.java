/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:32:13 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.CamelCaseSeparatorNamingPolicy;
import com.google.gson.GenericArrayTypeImpl;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CamelCaseSeparatorNamingPolicy_ESTest extends CamelCaseSeparatorNamingPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("]@f&*q");
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      String string0 = camelCaseSeparatorNamingPolicy0.translateName("", (Type) null, (Collection<Annotation>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("com.google.gson.CamelCaseSeparatorNamingPolicy");
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      String string0 = camelCaseSeparatorNamingPolicy0.translateName("com.google.gson.com.google.gson.CamelCaseSeparatorNamingPolicyCamelcom.google.gson.CamelCaseSeparatorNamingPolicyCasecom.google.gson.CamelCaseSeparatorNamingPolicySeparatorcom.google.gson.CamelCaseSeparatorNamingPolicyNamingcom.google.gson.CamelCaseSeparatorNamingPolicyPolicy", (Type) genericArrayTypeImpl0, (Collection<Annotation>) linkedList0);
      String string1 = camelCaseSeparatorNamingPolicy0.translateName(string0, (Type) genericArrayTypeImpl0, (Collection<Annotation>) linkedList0);
      // Undeclared exception!
      camelCaseSeparatorNamingPolicy0.translateName(string1, (Type) genericArrayTypeImpl0, (Collection<Annotation>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("]@f&*q");
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      // Undeclared exception!
      try { 
        camelCaseSeparatorNamingPolicy0.translateName((String) null, (Type) null, (Collection<Annotation>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("RX");
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      String string0 = camelCaseSeparatorNamingPolicy0.translateName("RX", (Type) null, (Collection<Annotation>) linkedList0);
      assertEquals("RRXX", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = null;
      try {
        camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }
}
