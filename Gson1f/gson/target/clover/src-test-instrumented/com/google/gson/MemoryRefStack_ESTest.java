/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:25:22 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.GenericArrayTypeImpl;
import com.google.gson.MemoryRefStack;
import com.google.gson.ObjectTypePair;
import com.google.gson.ParameterizedTypeImpl;
import java.lang.reflect.Type;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemoryRefStack_ESTest extends MemoryRefStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      Class<String> class0 = String.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(memoryRefStack0, class0, true);
      ObjectTypePair objectTypePair1 = memoryRefStack0.push(objectTypePair0);
      ObjectTypePair objectTypePair2 = memoryRefStack0.pop();
      assertSame(objectTypePair2, objectTypePair1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      Object object0 = new Object();
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0, (Type) null);
      ObjectTypePair objectTypePair0 = new ObjectTypePair(object0, parameterizedTypeImpl0, false);
      memoryRefStack0.push(objectTypePair0);
      ObjectTypePair objectTypePair1 = memoryRefStack0.pop();
      assertFalse(objectTypePair1.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      Class<String> class0 = String.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(memoryRefStack0, class0, true);
      memoryRefStack0.push(objectTypePair0);
      ObjectTypePair objectTypePair1 = memoryRefStack0.peek();
      assertTrue(objectTypePair1.isPreserveType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      Class<String> class0 = String.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(memoryRefStack0, class0, true);
      memoryRefStack0.push(objectTypePair0);
      boolean boolean0 = memoryRefStack0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      // Undeclared exception!
      try { 
        memoryRefStack0.push((ObjectTypePair) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      Integer integer0 = new Integer(0);
      ObjectTypePair objectTypePair0 = new ObjectTypePair(integer0, (Type) null, true);
      memoryRefStack0.push(objectTypePair0);
      // Undeclared exception!
      try { 
        memoryRefStack0.contains(objectTypePair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.MemoryRefStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      Class<String> class0 = String.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(memoryRefStack0, class0, true);
      memoryRefStack0.push(objectTypePair0);
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(genericArrayTypeImpl0, typeArray0, typeArray0[0]);
      ObjectTypePair objectTypePair1 = new ObjectTypePair(memoryRefStack0, parameterizedTypeImpl0, true);
      boolean boolean0 = memoryRefStack0.contains(objectTypePair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      Class<String> class0 = String.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(memoryRefStack0, class0, false);
      memoryRefStack0.push(objectTypePair0);
      Type[] typeArray0 = new Type[32];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(genericArrayTypeImpl0, typeArray0, typeArray0[0]);
      ObjectTypePair objectTypePair1 = new ObjectTypePair(memoryRefStack0, parameterizedTypeImpl0, false);
      objectTypePair1.setObject(genericArrayTypeImpl0);
      boolean boolean0 = memoryRefStack0.contains(objectTypePair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      Class<String> class0 = String.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(memoryRefStack0, class0, true);
      memoryRefStack0.push(objectTypePair0);
      boolean boolean0 = memoryRefStack0.contains(objectTypePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      boolean boolean0 = memoryRefStack0.contains((ObjectTypePair) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      boolean boolean0 = memoryRefStack0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      Class<String> class0 = String.class;
      ObjectTypePair objectTypePair0 = new ObjectTypePair(memoryRefStack0, class0, false);
      memoryRefStack0.push(objectTypePair0);
      ObjectTypePair objectTypePair1 = memoryRefStack0.peek();
      assertSame(objectTypePair1, objectTypePair0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      // Undeclared exception!
      try { 
        memoryRefStack0.peek();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryRefStack memoryRefStack0 = new MemoryRefStack();
      // Undeclared exception!
      try { 
        memoryRefStack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }
}
