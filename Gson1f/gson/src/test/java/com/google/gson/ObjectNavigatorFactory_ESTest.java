/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:23:15 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.ExposeAnnotationDeserializationExclusionStrategy;
import com.google.gson.FieldNamingStrategy2;
import com.google.gson.InnerClassExclusionStrategy;
import com.google.gson.JavaFieldNamingPolicy;
import com.google.gson.LowerCaseNamingPolicy;
import com.google.gson.NullExclusionStrategy;
import com.google.gson.ObjectNavigator;
import com.google.gson.ObjectNavigatorFactory;
import com.google.gson.ObjectTypePair;
import com.google.gson.UpperCaseNamingPolicy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectNavigatorFactory_ESTest extends ObjectNavigatorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NullExclusionStrategy nullExclusionStrategy0 = new NullExclusionStrategy();
      ObjectNavigatorFactory objectNavigatorFactory0 = null;
      try {
        objectNavigatorFactory0 = new ObjectNavigatorFactory(nullExclusionStrategy0, (FieldNamingStrategy2) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JavaFieldNamingPolicy javaFieldNamingPolicy0 = new JavaFieldNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory((ExclusionStrategy) null, javaFieldNamingPolicy0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExposeAnnotationDeserializationExclusionStrategy exposeAnnotationDeserializationExclusionStrategy0 = new ExposeAnnotationDeserializationExclusionStrategy();
      UpperCaseNamingPolicy upperCaseNamingPolicy0 = new UpperCaseNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(exposeAnnotationDeserializationExclusionStrategy0, upperCaseNamingPolicy0);
      FieldNamingStrategy2 fieldNamingStrategy2_0 = objectNavigatorFactory0.getFieldNamingPolicy();
      assertSame(fieldNamingStrategy2_0, upperCaseNamingPolicy0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InnerClassExclusionStrategy innerClassExclusionStrategy0 = new InnerClassExclusionStrategy();
      LowerCaseNamingPolicy lowerCaseNamingPolicy0 = new LowerCaseNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(innerClassExclusionStrategy0, lowerCaseNamingPolicy0);
      ObjectNavigator objectNavigator0 = objectNavigatorFactory0.create((ObjectTypePair) null);
      assertNotNull(objectNavigator0);
  }
}
