/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:46:24 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.AnonymousAndLocalClassExclusionStrategy;
import com.google.gson.CamelCaseSeparatorNamingPolicy;
import com.google.gson.DefaultTypeAdapters;
import com.google.gson.DisjunctionExclusionStrategy;
import com.google.gson.ExclusionStrategy;
import com.google.gson.ExposeAnnotationDeserializationExclusionStrategy;
import com.google.gson.ExposeAnnotationSerializationExclusionStrategy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.FieldNamingStrategy2Adapter;
import com.google.gson.GenericArrayTypeImpl;
import com.google.gson.InnerClassExclusionStrategy;
import com.google.gson.InstanceCreator;
import com.google.gson.JavaFieldNamingPolicy;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializationContextDefault;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializationContextDefault;
import com.google.gson.JsonSerializer;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.LowerCaseNamingPolicy;
import com.google.gson.MappedObjectConstructor;
import com.google.gson.ModifierBasedExclusionStrategy;
import com.google.gson.ModifyFirstLetterNamingPolicy;
import com.google.gson.NullExclusionStrategy;
import com.google.gson.ObjectNavigatorFactory;
import com.google.gson.ObjectTypePair;
import com.google.gson.ParameterizedTypeHandlerMap;
import com.google.gson.ParameterizedTypeImpl;
import com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy;
import com.google.gson.UpperCaseNamingPolicy;
import com.google.gson.VersionExclusionStrategy;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalTime;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultTypeAdapters_ESTest extends DefaultTypeAdapters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterizedTypeHandlerMap<InstanceCreator<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultInstanceCreators();
      DefaultTypeAdapters.DefaultTimestampDeserializer defaultTypeAdapters_DefaultTimestampDeserializer0 = new DefaultTypeAdapters.DefaultTimestampDeserializer();
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultDeserializers();
      Class<Character> class0 = Character.TYPE;
      Type[] typeArray0 = new Type[7];
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(typeArray0[2]);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(class0, typeArray0, genericArrayTypeImpl0);
      NullExclusionStrategy nullExclusionStrategy0 = new NullExclusionStrategy();
      LowerCaseNamingPolicy lowerCaseNamingPolicy0 = new LowerCaseNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(nullExclusionStrategy0, lowerCaseNamingPolicy0);
      MappedObjectConstructor mappedObjectConstructor0 = new MappedObjectConstructor(parameterizedTypeHandlerMap0);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap1, mappedObjectConstructor0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultTimestampDeserializer0.deserialize((JsonElement) null, parameterizedTypeImpl0, jsonDeserializationContextDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultTimestampDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      Class<Short> class0 = Short.TYPE;
      Type type0 = ObjectTypePair.getActualTypeIfMoreSpecific(class0, class0);
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList0);
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("com.google.gson.JavaFieldNamingPolicy");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(disjunctionExclusionStrategy0, camelCaseSeparatorNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, true, parameterizedTypeHandlerMap0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultTimeTypeAdapter0.serialize((Time) null, (Type) genericArrayTypeImpl0, (JsonSerializationContext) jsonSerializationContextDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      DefaultTypeAdapters.DoubleSerializer defaultTypeAdapters_DoubleSerializer0 = new DefaultTypeAdapters.DoubleSerializer(true);
      Double double0 = new Double(1824.751406157801);
      Class<Float> class0 = Float.TYPE;
      ExposeAnnotationSerializationExclusionStrategy exposeAnnotationSerializationExclusionStrategy0 = new ExposeAnnotationSerializationExclusionStrategy();
      FieldNamingStrategy fieldNamingStrategy0 = mock(FieldNamingStrategy.class, new ViolatedAssumptionAnswer());
      FieldNamingStrategy2Adapter fieldNamingStrategy2Adapter0 = new FieldNamingStrategy2Adapter(fieldNamingStrategy0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(exposeAnnotationSerializationExclusionStrategy0, fieldNamingStrategy2Adapter0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, true, parameterizedTypeHandlerMap0);
      JsonElement jsonElement0 = defaultTypeAdapters_DoubleSerializer0.serialize(double0, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
      Class<Object> class1 = Object.class;
      try { 
        defaultTypeAdapters_DefaultTimeTypeAdapter0.deserialize(jsonElement0, class1, (JsonDeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"java.lang.Double@0000000016\"
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      Class<Integer> class0 = Integer.TYPE;
      int[] intArray0 = new int[6];
      ModifierBasedExclusionStrategy modifierBasedExclusionStrategy0 = new ModifierBasedExclusionStrategy(intArray0);
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("u'+LZ_QcC");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(modifierBasedExclusionStrategy0, camelCaseSeparatorNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.serialize((Date) null, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      Class<Character> class0 = Character.TYPE;
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultDeserializers();
      Date date0 = new Date(0L);
      JsonElement jsonElement0 = defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.serialize(date0, (Type) class0, (JsonSerializationContext) null);
      NullExclusionStrategy nullExclusionStrategy0 = new NullExclusionStrategy();
      JavaFieldNamingPolicy javaFieldNamingPolicy0 = new JavaFieldNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(nullExclusionStrategy0, javaFieldNamingPolicy0);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap0, (MappedObjectConstructor) null);
      Date date1 = defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.deserialize(jsonElement0, class0, jsonDeserializationContextDefault0);
      assertNotSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter(0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      DefaultTypeAdapters.DoubleSerializer defaultTypeAdapters_DoubleSerializer0 = new DefaultTypeAdapters.DoubleSerializer(false);
      Double double0 = new Double(0.0);
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)defaultTypeAdapters_DoubleSerializer0.serialize(double0, (Type) class0, (JsonSerializationContext) null);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      DefaultTypeAdapters.FloatSerializer defaultTypeAdapters_FloatSerializer0 = new DefaultTypeAdapters.FloatSerializer(true);
      Float float0 = new Float((-1.0F));
      Class<Float> class0 = Float.TYPE;
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault((ObjectNavigatorFactory) null, false, parameterizedTypeHandlerMap0);
      JsonElement jsonElement0 = defaultTypeAdapters_FloatSerializer0.serialize(float0, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      HashMap<Time, Object> hashMap0 = new HashMap<Time, Object>();
      Class<Float> class0 = Float.TYPE;
      Time time0 = new Time((-2272L));
      hashMap0.put(time0, (Object) null);
      JsonElement jsonElement0 = defaultTypeAdapters_MapTypeAdapter0.serialize((Map) hashMap0, (Type) class0, (JsonSerializationContext) null);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      HashMap<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter, Long> hashMap0 = new HashMap<DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter, Long>();
      Class<Float> class0 = Float.TYPE;
      Type[] typeArray0 = new Type[4];
      Class<Byte> class1 = Byte.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(class0, typeArray0, class1);
      ExposeAnnotationDeserializationExclusionStrategy exposeAnnotationDeserializationExclusionStrategy0 = new ExposeAnnotationDeserializationExclusionStrategy();
      LowerCaseNamingPolicy lowerCaseNamingPolicy0 = new LowerCaseNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(exposeAnnotationDeserializationExclusionStrategy0, lowerCaseNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, true, parameterizedTypeHandlerMap0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_MapTypeAdapter0.serialize((Map) hashMap0, (Type) parameterizedTypeImpl0, (JsonSerializationContext) jsonSerializationContextDefault0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      Class<Integer> class0 = Integer.TYPE;
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      try { 
        defaultTypeAdapters_DefaultTimeTypeAdapter0.deserialize(jsonArray0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      ParameterizedTypeHandlerMap<InstanceCreator<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultInstanceCreators();
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultDeserializers();
      JsonNull jsonNull0 = JsonNull.createJsonNull();
      Class<Character> class0 = Character.TYPE;
      InnerClassExclusionStrategy innerClassExclusionStrategy0 = new InnerClassExclusionStrategy();
      FieldNamingStrategy fieldNamingStrategy0 = mock(FieldNamingStrategy.class, new ViolatedAssumptionAnswer());
      FieldNamingStrategy2Adapter fieldNamingStrategy2Adapter0 = new FieldNamingStrategy2Adapter(fieldNamingStrategy0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(innerClassExclusionStrategy0, fieldNamingStrategy2Adapter0);
      MappedObjectConstructor mappedObjectConstructor0 = new MappedObjectConstructor(parameterizedTypeHandlerMap0);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap1, mappedObjectConstructor0);
      try { 
        defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.deserialize(jsonNull0, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultTypeAdapters.FloatSerializer defaultTypeAdapters_FloatSerializer0 = new DefaultTypeAdapters.FloatSerializer(false);
      Float float0 = new Float((double) 0);
      Class<Short> class0 = Short.TYPE;
      JsonElement jsonElement0 = defaultTypeAdapters_FloatSerializer0.serialize(float0, (Type) class0, (JsonSerializationContext) null);
      DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0 = new DefaultTypeAdapters.DefaultJavaSqlDateTypeAdapter();
      try { 
        defaultTypeAdapters_DefaultJavaSqlDateTypeAdapter0.deserialize(jsonElement0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"java.lang.Float@0000000003\"
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultDeserializers();
      DefaultTypeAdapters.DefaultTimestampDeserializer defaultTypeAdapters_DefaultTimestampDeserializer0 = new DefaultTypeAdapters.DefaultTimestampDeserializer();
      ParameterizedTypeHandlerMap<InstanceCreator<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultInstanceCreators();
      JsonObject jsonObject0 = new JsonObject();
      Class<Float> class0 = Float.TYPE;
      VersionExclusionStrategy versionExclusionStrategy0 = new VersionExclusionStrategy(1.0);
      UpperCaseNamingPolicy upperCaseNamingPolicy0 = new UpperCaseNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(versionExclusionStrategy0, upperCaseNamingPolicy0);
      MappedObjectConstructor mappedObjectConstructor0 = new MappedObjectConstructor(parameterizedTypeHandlerMap1);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap0, mappedObjectConstructor0);
      try { 
        defaultTypeAdapters_DefaultTimestampDeserializer0.deserialize(jsonObject0, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultDeserializers();
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter("");
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      JsonElement jsonElement0 = longSerializationPolicy0.serialize((Long) null);
      Class<Integer> class0 = Integer.TYPE;
      AnonymousAndLocalClassExclusionStrategy anonymousAndLocalClassExclusionStrategy0 = new AnonymousAndLocalClassExclusionStrategy();
      FieldNamingStrategy fieldNamingStrategy0 = mock(FieldNamingStrategy.class, new ViolatedAssumptionAnswer());
      FieldNamingStrategy2Adapter fieldNamingStrategy2Adapter0 = new FieldNamingStrategy2Adapter(fieldNamingStrategy0);
      SerializedNameAnnotationInterceptingNamingPolicy serializedNameAnnotationInterceptingNamingPolicy0 = new SerializedNameAnnotationInterceptingNamingPolicy(fieldNamingStrategy2Adapter0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(anonymousAndLocalClassExclusionStrategy0, serializedNameAnnotationInterceptingNamingPolicy0);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap0, (MappedObjectConstructor) null);
      try { 
        defaultTypeAdapters_DefaultDateTypeAdapter0.deserialize(jsonElement0, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"null\"
         //
         verifyException("com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers(true, longSerializationPolicy0);
      HashMap<Locale, BigInteger> hashMap0 = new HashMap<Locale, BigInteger>();
      Locale locale0 = Locale.JAPAN;
      BigInteger bigInteger0 = BigInteger.ONE;
      hashMap0.put(locale0, bigInteger0);
      Class<Double> class0 = Double.TYPE;
      Class<ModifyFirstLetterNamingPolicy.LetterModifier> class1 = ModifyFirstLetterNamingPolicy.LetterModifier.class;
      Type type0 = ObjectTypePair.getActualTypeIfMoreSpecific(class0, class1);
      int[] intArray0 = new int[0];
      ModifierBasedExclusionStrategy modifierBasedExclusionStrategy0 = new ModifierBasedExclusionStrategy(intArray0);
      CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy0 = new CamelCaseSeparatorNamingPolicy("year");
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(modifierBasedExclusionStrategy0, camelCaseSeparatorNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      JsonElement jsonElement0 = defaultTypeAdapters_MapTypeAdapter0.serialize((Map) hashMap0, type0, (JsonSerializationContext) jsonSerializationContextDefault0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultTypeAdapters.DefaultTimeTypeAdapter defaultTypeAdapters_DefaultTimeTypeAdapter0 = new DefaultTypeAdapters.DefaultTimeTypeAdapter();
      Class<Character> class0 = Character.TYPE;
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(31L);
      Time time0 = Time.valueOf(localTime0);
      JsonElement jsonElement0 = defaultTypeAdapters_DefaultTimeTypeAdapter0.serialize(time0, (Type) class0, (JsonSerializationContext) null);
      Time time1 = defaultTypeAdapters_DefaultTimeTypeAdapter0.deserialize(jsonElement0, class0, (JsonDeserializationContext) null);
      assertNotSame(time1, time0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers(true, longSerializationPolicy0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(17, 17, 0, 0, 0);
      java.util.Date date0 = mockGregorianCalendar0.getGregorianChange();
      Class<Short> class0 = Short.TYPE;
      ExposeAnnotationDeserializationExclusionStrategy exposeAnnotationDeserializationExclusionStrategy0 = new ExposeAnnotationDeserializationExclusionStrategy();
      ModifyFirstLetterNamingPolicy.LetterModifier modifyFirstLetterNamingPolicy_LetterModifier0 = ModifyFirstLetterNamingPolicy.LetterModifier.LOWER;
      ModifyFirstLetterNamingPolicy modifyFirstLetterNamingPolicy0 = new ModifyFirstLetterNamingPolicy(modifyFirstLetterNamingPolicy_LetterModifier0);
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(exposeAnnotationDeserializationExclusionStrategy0, modifyFirstLetterNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      JsonElement jsonElement0 = defaultTypeAdapters_DefaultDateTypeAdapter0.serialize(date0, (Type) class0, (JsonSerializationContext) jsonSerializationContextDefault0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter(0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultTypeAdapters_DefaultDateTypeAdapter0.serialize((java.util.Date) null, (Type) class0, (JsonSerializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultTypeAdapters.DefaultDateTypeAdapter defaultTypeAdapters_DefaultDateTypeAdapter0 = new DefaultTypeAdapters.DefaultDateTypeAdapter();
      String string0 = defaultTypeAdapters_DefaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonSerializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultSerializers();
      AnonymousAndLocalClassExclusionStrategy anonymousAndLocalClassExclusionStrategy0 = new AnonymousAndLocalClassExclusionStrategy();
      JavaFieldNamingPolicy javaFieldNamingPolicy0 = new JavaFieldNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(anonymousAndLocalClassExclusionStrategy0, javaFieldNamingPolicy0);
      JsonSerializationContextDefault jsonSerializationContextDefault0 = new JsonSerializationContextDefault(objectNavigatorFactory0, false, parameterizedTypeHandlerMap0);
      // Undeclared exception!
      try { 
        jsonSerializationContextDefault0.serialize((Object) parameterizedTypeHandlerMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Expecting parameterized type, got class com.google.gson.ParameterizedTypeHandlerMap.
         //  Are you missing the use of TypeToken idiom?
         //  See http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener
         //
         verifyException("com.google.gson.TypeInfoFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultTypeAdapters defaultTypeAdapters0 = new DefaultTypeAdapters();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParameterizedTypeHandlerMap<JsonDeserializer<?>> parameterizedTypeHandlerMap0 = DefaultTypeAdapters.getDefaultDeserializers();
      ParameterizedTypeHandlerMap<InstanceCreator<?>> parameterizedTypeHandlerMap1 = DefaultTypeAdapters.getDefaultInstanceCreators();
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      Class<Long> class0 = Long.TYPE;
      InnerClassExclusionStrategy innerClassExclusionStrategy0 = new InnerClassExclusionStrategy();
      LowerCaseNamingPolicy lowerCaseNamingPolicy0 = new LowerCaseNamingPolicy();
      ObjectNavigatorFactory objectNavigatorFactory0 = new ObjectNavigatorFactory(innerClassExclusionStrategy0, lowerCaseNamingPolicy0);
      MappedObjectConstructor mappedObjectConstructor0 = new MappedObjectConstructor(parameterizedTypeHandlerMap1);
      JsonDeserializationContextDefault jsonDeserializationContextDefault0 = new JsonDeserializationContextDefault(objectNavigatorFactory0, parameterizedTypeHandlerMap0, mappedObjectConstructor0);
      // Undeclared exception!
      try { 
        defaultTypeAdapters_MapTypeAdapter0.deserialize((JsonElement) null, class0, jsonDeserializationContextDefault0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No-args constructor for long does not exist. Register an InstanceCreator with Gson for this type to fix this problem.
         //
         verifyException("com.google.gson.MappedObjectConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      String string0 = defaultTypeAdapters_MapTypeAdapter0.toString();
      assertEquals("MapTypeAdapter", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultTypeAdapters.MapTypeAdapter defaultTypeAdapters_MapTypeAdapter0 = new DefaultTypeAdapters.MapTypeAdapter();
      Class<Character> class0 = Character.TYPE;
      Map map0 = defaultTypeAdapters_MapTypeAdapter0.createInstance(class0);
      assertTrue(map0.isEmpty());
  }
}
