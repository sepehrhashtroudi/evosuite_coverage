/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:56:24 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.LruCache;
import java.util.AbstractMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LruCache_ESTest extends LruCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LruCache<String, Integer> lruCache0 = new LruCache<String, Integer>(1);
      int int0 = lruCache0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LruCache<Object, Object> lruCache0 = new LruCache<Object, Object>(1845);
      Integer integer0 = new Integer(0);
      lruCache0.put(integer0, integer0);
      int int0 = lruCache0.size();
      assertFalse(lruCache0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LruCache<String, Integer> lruCache0 = new LruCache<String, Integer>(1);
      lruCache0.addElement((String) null, integer0);
      assertFalse(lruCache0.isEmpty());
      
      lruCache0.removeElement((String) null);
      assertTrue(lruCache0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LruCache<String, Integer> lruCache0 = new LruCache<String, Integer>(1);
      Integer integer0 = new Integer((-1358));
      lruCache0.put("", integer0);
      lruCache0.getElement("");
      assertFalse(lruCache0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LruCache<Integer, String> lruCache0 = null;
      try {
        lruCache0 = new LruCache<Integer, String>((-385));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -385
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LruCache<Object, Integer> lruCache0 = new LruCache<Object, Integer>(1994);
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry1);
      boolean boolean0 = lruCache0.removeEldestEntry(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LruCache<String, String> lruCache0 = new LruCache<String, String>(1);
      String string0 = lruCache0.getElement("_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LruCache<Object, String> lruCache0 = new LruCache<Object, String>(0);
      lruCache0.clear();
      assertTrue(lruCache0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LruCache<String, Integer> lruCache0 = new LruCache<String, Integer>(0);
      LruCache<Object, String> lruCache1 = new LruCache<Object, String>(0);
      String string0 = lruCache1.removeElement(lruCache0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LruCache<Object, String> lruCache0 = new LruCache<Object, String>(0);
      Integer integer0 = new Integer(0);
      lruCache0.addElement(integer0, "");
      assertTrue(lruCache0.isEmpty());
  }
}
