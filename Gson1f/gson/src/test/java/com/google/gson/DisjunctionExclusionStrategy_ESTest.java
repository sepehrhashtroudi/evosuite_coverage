/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 05 09:36:55 GMT 2023
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.AnonymousAndLocalClassExclusionStrategy;
import com.google.gson.DisjunctionExclusionStrategy;
import com.google.gson.ExclusionStrategy;
import com.google.gson.ExposeAnnotationSerializationExclusionStrategy;
import com.google.gson.FieldAttributes;
import com.google.gson.InnerClassExclusionStrategy;
import com.google.gson.ModifierBasedExclusionStrategy;
import com.google.gson.NullExclusionStrategy;
import com.google.gson.SyntheticFieldExclusionStrategy;
import com.google.gson.VersionExclusionStrategy;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DisjunctionExclusionStrategy_ESTest extends DisjunctionExclusionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      AnonymousAndLocalClassExclusionStrategy anonymousAndLocalClassExclusionStrategy0 = new AnonymousAndLocalClassExclusionStrategy();
      linkedList0.add((ExclusionStrategy) anonymousAndLocalClassExclusionStrategy0);
      ExclusionStrategy exclusionStrategy0 = linkedList0.removeLast();
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList0);
      Class<ExposeAnnotationSerializationExclusionStrategy> class0 = ExposeAnnotationSerializationExclusionStrategy.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      FieldAttributes fieldAttributes0 = null;
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      Class<DisjunctionExclusionStrategy> class1 = DisjunctionExclusionStrategy.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class1);
      Class<Integer> class2 = Integer.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class2);
      linkedList0.stream();
      disjunctionExclusionStrategy0.shouldSkipClass(class2);
      linkedList0.add(exclusionStrategy0);
      Class<NullExclusionStrategy> class3 = NullExclusionStrategy.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class3);
      FieldAttributes fieldAttributes1 = null;
      // Undeclared exception!
      try { 
        disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.AnonymousAndLocalClassExclusionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = null;
      try {
        disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy((Collection<ExclusionStrategy>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition failed: false
         //
         verifyException("com.google.gson.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList0);
      Class<String> class0 = String.class;
      Field field0 = null;
      FieldAttributes fieldAttributes0 = null;
      try {
        fieldAttributes0 = new FieldAttributes(class0, (Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.FieldAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      AnonymousAndLocalClassExclusionStrategy anonymousAndLocalClassExclusionStrategy0 = new AnonymousAndLocalClassExclusionStrategy();
      Class<ExposeAnnotationSerializationExclusionStrategy> class0 = ExposeAnnotationSerializationExclusionStrategy.class;
      FieldAttributes fieldAttributes0 = null;
      // Undeclared exception!
      try { 
        anonymousAndLocalClassExclusionStrategy0.shouldSkipField((FieldAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.AnonymousAndLocalClassExclusionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      LinkedList<ModifierBasedExclusionStrategy> linkedList1 = new LinkedList<ModifierBasedExclusionStrategy>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1375);
      intArray0[1] = 2163;
      intArray0[2] = (-2076);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2659);
      intArray0[6] = 5341;
      ModifierBasedExclusionStrategy modifierBasedExclusionStrategy0 = new ModifierBasedExclusionStrategy(intArray0);
      linkedList1.add(modifierBasedExclusionStrategy0);
      linkedList0.iterator();
      linkedList0.addAll((Collection<? extends ExclusionStrategy>) linkedList1);
      int[] intArray1 = new int[2];
      intArray1[0] = 3831;
      intArray1[1] = 0;
      ModifierBasedExclusionStrategy modifierBasedExclusionStrategy1 = new ModifierBasedExclusionStrategy(intArray1);
      linkedList0.add((ExclusionStrategy) modifierBasedExclusionStrategy1);
      ExposeAnnotationSerializationExclusionStrategy exposeAnnotationSerializationExclusionStrategy0 = new ExposeAnnotationSerializationExclusionStrategy();
      Class<Integer> class0 = Integer.class;
      FieldAttributes fieldAttributes0 = null;
      try {
        fieldAttributes0 = new FieldAttributes(class0, (Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.FieldAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<ModifierBasedExclusionStrategy> linkedList0 = new LinkedList<ModifierBasedExclusionStrategy>();
      ModifierBasedExclusionStrategy modifierBasedExclusionStrategy0 = new ModifierBasedExclusionStrategy((int[]) null);
      linkedList0.add(modifierBasedExclusionStrategy0);
      LinkedList<ExclusionStrategy> linkedList1 = new LinkedList<ExclusionStrategy>(linkedList0);
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList1);
      Class<String> class0 = String.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      boolean boolean0 = disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      Class<InnerClassExclusionStrategy> class1 = InnerClassExclusionStrategy.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class1);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      Class<Object> class2 = Object.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class2);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      Class<NullExclusionStrategy> class3 = NullExclusionStrategy.class;
      boolean boolean1 = disjunctionExclusionStrategy0.shouldSkipClass(class3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList0);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      Class<VersionExclusionStrategy> class0 = VersionExclusionStrategy.class;
      Class<String> class1 = String.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class1);
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      boolean boolean0 = disjunctionExclusionStrategy0.shouldSkipClass(class1);
      boolean boolean1 = disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.removeAll(linkedList1);
      Class<VersionExclusionStrategy> class0 = VersionExclusionStrategy.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      boolean boolean0 = disjunctionExclusionStrategy0.shouldSkipField((FieldAttributes) null);
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      Class<ExposeAnnotationSerializationExclusionStrategy> class1 = ExposeAnnotationSerializationExclusionStrategy.class;
      boolean boolean1 = disjunctionExclusionStrategy0.shouldSkipClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<ExclusionStrategy> linkedList0 = new LinkedList<ExclusionStrategy>();
      DisjunctionExclusionStrategy disjunctionExclusionStrategy0 = new DisjunctionExclusionStrategy(linkedList0);
      Class<SyntheticFieldExclusionStrategy> class0 = SyntheticFieldExclusionStrategy.class;
      disjunctionExclusionStrategy0.shouldSkipClass(class0);
      Class<NullExclusionStrategy> class1 = NullExclusionStrategy.class;
      Class<ModifierBasedExclusionStrategy> class2 = ModifierBasedExclusionStrategy.class;
      FieldAttributes fieldAttributes0 = null;
      try {
        fieldAttributes0 = new FieldAttributes(class2, (Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.FieldAttributes", e);
      }
  }
}
